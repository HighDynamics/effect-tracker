{"version":3,"sources":["Components/TurnManipulator/TurnManipulator.js","Components/Effects/Effects.js","Components/CreateNewEffect/CreateNewEffect.js","Components/App/App.js","utilities.js","reportWebVitals.js","index.js"],"names":["TurnManipulator","nextTurn","previousTurn","reset","className","onClick","EffectItem","effect","turnNumber","name","target","details","duration","durationType","conditions","turnUsed","remainingRounds","rounds","Math","floor","roundsToHours","roundsToDays","formatTimeRemaing","getRemainingTime","Effects","effectItem","effects","map","CreateNewEffect","addEffect","useState","setName","setTarget","setDetails","setDuration","setDurationType","setConditions","onSubmit","e","preventDefault","type","placeholder","value","onChange","required","Number","rows","cols","App","setTurnNumber","setEffects","toggle","setToggle","object","clonedEffectsArray","JSON","parse","stringify","push","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.440e8d0c.chunk.js","sourcesContent":["import \"./TurnManipulator.css\";\n\nconst TurnManipulator = ({ nextTurn, previousTurn, reset }) => {\n  const previousTurnArrows = \"<<\";\n  const nextTurnArrows = \">>\";\n  return (\n    <>\n      <div className=\"turnManipulatorButtonsContainer\">\n        <button className=\"basicButton\" onClick={previousTurn}>\n          {previousTurnArrows}\n        </button>\n        <button className=\"basicButton\" onClick={nextTurn}>\n          {nextTurnArrows}\n        </button>\n      </div>\n      <div className=\"resetButtonContainer\">\n        <button className=\"resetButton basicButton\" onClick={reset}>\n          reset\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default TurnManipulator;\n","import \"./Effects.css\";\n\nconst EffectItem = ({ effect, turnNumber }) => {\n  const name = effect.name;\n  const target = effect.target;\n  const details = effect.details;\n  const duration = effect.duration;\n  const durationType = effect.durationType;\n  const conditions = effect.conditions;\n  const turnUsed = effect.turnUsed;\n  const roundsToMinutes = (rounds) => {\n    const minutes = Math.floor(rounds / 10);\n    const seconds = Math.floor((rounds % 10) * 6);\n    return minutes + \"m \" + seconds + \"s\";\n  };\n  const roundsToHours = (rounds) => {\n    const hours = Math.floor(rounds / 600);\n    const minutes = Math.floor((rounds % 600) / 10);\n    return hours + \"h \" + minutes + \"m\";\n  };\n  const roundsToDays = (rounds) => {\n    const days = Math.floor(rounds / 14400);\n    const hours = Math.floor((rounds % 14400) / 600);\n    return days + \"d \" + hours + \"h\";\n  };\n  const getRemainingTime = (durationType) => {\n    let remainingRounds = turnUsed + duration - turnNumber;\n    switch (durationType) {\n      case \"rounds\":\n        break;\n      case \"minutes\":\n        remainingRounds = turnUsed + duration * 10 - turnNumber;\n        break;\n      case \"hours\":\n        remainingRounds = turnUsed + duration * 600 - turnNumber;\n        break;\n      case \"days\":\n        remainingRounds = turnUsed + duration * 14400 - turnNumber;\n        break;\n      case \"permanent\":\n        return \"\\u221e\";\n      default:\n        break;\n    }\n    const formatTimeRemaing = (remainingRounds) => {\n      if (remainingRounds < 20) {\n        return remainingRounds + \" rounds\";\n      } else if (remainingRounds >= 20 && remainingRounds < 600) {\n        return roundsToMinutes(remainingRounds);\n      } else if (remainingRounds >= 600 && remainingRounds < 14400) {\n        return roundsToHours(remainingRounds);\n      } else if (remainingRounds >= 14400) {\n        return roundsToDays(remainingRounds);\n      }\n    };\n    return formatTimeRemaing(remainingRounds);\n  };\n  return (\n    <>\n      <div className=\"effectContainer\">\n        <p className=\"effectItem\">Name: {name}</p>\n        {target !== \"\" ? <p className=\"effectItem\">Target: {target}</p> : null}\n        {details !== \"\" ? (\n          <p className=\"effectItem\">Details: {details}</p>\n        ) : null}\n        <p className=\"effectItem\">\n          Remaining Time: {getRemainingTime(durationType)}\n        </p>\n        {conditions !== \"\" ? (\n          <p className=\"effectItem\">Conditions: {conditions}</p>\n        ) : null}\n      </div>\n    </>\n  );\n};\n\nconst Effects = ({ turnNumber, effects }) => {\n  const effectItem = effects.map((effect) => (\n    <EffectItem effect={effect} turnNumber={turnNumber} key={effect.name} />\n  ));\n  return <>{effectItem}</>;\n};\n\nexport default Effects;\n","import { useState } from \"react\";\n\nimport \"./CreateNewEffect.css\";\n\nconst CreateNewEffect = ({ addEffect, turnNumber }) => {\n  const [name, setName] = useState(\"\");\n  const [target, setTarget] = useState(\"\");\n  const [details, setDetails] = useState(\"\");\n  const [duration, setDuration] = useState(1);\n  const [durationType, setDurationType] = useState(\"\");\n  const [conditions, setConditions] = useState(\"\");\n  let effect = {\n    name: name,\n    target: target,\n    details: details,\n    duration: duration,\n    durationType: durationType,\n    conditions: conditions,\n    turnUsed: turnNumber,\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    addEffect(effect);\n  };\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <div className=\"formContainer\">\n          <fieldset className=\"formItem\">\n            <legend className=\"formItemTitle\">Name</legend>\n            <input\n              type=\"text\"\n              placeholder=\"name of effect\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              required\n            />\n            <p className=\"requiredText\">* required</p>\n          </fieldset>\n          <fieldset className=\"formItem\">\n            <legend className=\"formItemTitle\">Duration</legend>\n            <div className=\"durationInputContainer\">\n              <input\n                className=\"durationNumberInput\"\n                type=\"number\"\n                placeholder=\"4\"\n                value={duration}\n                onChange={(e) => setDuration(Number(e.target.value))}\n                required\n              />\n              <select\n                className=\"durationTypeSelector\"\n                onChange={(e) => setDurationType(e.target.value)}\n              >\n                <option value=\"rounds\">round(s)</option>\n                <option value=\"minutes\">minute(s)</option>\n                <option value=\"hours\">hour(s)</option>\n                <option value=\"days\">day(s)</option>\n                <option value=\"permanent\">permanent</option>\n              </select>\n            </div>{\" \"}\n            <p className=\"requiredText\">* required</p>\n          </fieldset>\n          <fieldset className=\"formItem\">\n            <legend className=\"formItemTitle\">Target or Area</legend>\n            <input\n              type=\"text\"\n              placeholder=\"who or what is affected\"\n              value={target}\n              onChange={(e) => setTarget(e.target.value)}\n            />\n          </fieldset>\n          <fieldset className=\"formItem\">\n            <legend className=\"formItemTitle\">Details</legend>\n            <textarea\n              rows=\"4\"\n              cols=\"30\"\n              placeholder='breif description what effect does. ex.: \"+4 armor bonus\"'\n              value={details}\n              onChange={(e) => setDetails(e.target.value)}\n            />\n          </fieldset>\n          <fieldset className=\"formItem\">\n            <legend className=\"formItemTitle\">Conditions</legend>\n            <textarea\n              rows=\"4\"\n              cols=\"30\"\n              placeholder=\"ex.: must be within 60' of Sabri\"\n              value={conditions}\n              onChange={(e) => setConditions(e.target.value)}\n            />\n          </fieldset>\n        </div>\n        <div className=\"addEffectButtonContainer\">\n          <input\n            className=\"basicButton addEffectButton\"\n            type=\"submit\"\n            value=\"add effect\"\n          />\n        </div>\n      </form>\n    </>\n  );\n};\n\nexport default CreateNewEffect;\n","import { useState } from \"react\";\n\nimport \"./App.css\";\n\nimport TurnManipulator from \"../TurnManipulator/TurnManipulator\";\nimport Effects from \"../Effects/Effects\";\nimport CreateNewEffect from \"../CreateNewEffect/CreateNewEffect\";\n\nimport { clone } from \"../../utilities.js\";\n\nfunction App() {\n  const [turnNumber, setTurnNumber] = useState(1);\n  const [effects, setEffects] = useState([]);\n  const [toggle, setToggle] = useState(false);\n  const nextTurn = () => setTurnNumber(turnNumber + 1);\n  const previousTurn = () => setTurnNumber(turnNumber - 1);\n  const reset = () => {\n    setTurnNumber(1);\n    setEffects([]);\n  };\n  const addEffect = (effect) => {\n    const clonedEffectsArray = clone(effects);\n    clonedEffectsArray.push(effect);\n    setEffects(clonedEffectsArray);\n  };\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">Effect Tracker</h1>\n      <h2 className=\"turnCount\">Turn {turnNumber}</h2>\n      <TurnManipulator\n        nextTurn={nextTurn}\n        previousTurn={previousTurn}\n        reset={reset}\n      />\n      <br />\n      <div className=\"newEffectButtonContainer\">\n        <button\n          className=\"newEffectButton basicButton\"\n          onClick={() => setToggle(!toggle)}\n        >\n          {toggle ? \"Collapse\" : \"New Effect\"}\n        </button>\n      </div>\n      {toggle ? (\n        <CreateNewEffect addEffect={addEffect} turnNumber={turnNumber} />\n      ) : null}\n      <Effects turnNumber={turnNumber} effects={effects} />\n    </div>\n  );\n}\n\nexport default App;\n","function clone<T>(object: T): T {\n  return JSON.parse(JSON.stringify(object));\n}\n\nexport { clone };\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Components/App/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}