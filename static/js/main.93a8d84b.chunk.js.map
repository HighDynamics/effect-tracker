{"version":3,"sources":["Components/TurnManipulator/TurnManipulator.js","utilities.js","Components/Effects/Effects.js","Components/CreateNewEffect/CreateNewEffect.js","Components/Modal/Modal.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["TurnManipulator","setTurnNumber","turnNumber","reset","setModal","modal","className","onClick","clone","object","JSON","parse","stringify","getClassName","durationRemaining","Infinity","getRemainingRounds","effect","remainingRounds","turnUsed","duration","durationType","EffectItem","rounds","removeEffect","resetEffectDuration","useState","toggle","setToggle","name","target","details","conditions","minutesAndSeconds","Math","floor","hoursAndMinutes","getRoundsToHoursAndMinutes","daysAndHours","getRoundsToDaysAndHours","remainingTime","formatRoundsRemaing","additionalClass","role","Effects","effects","setEffects","newEffectsArray","index","findIndex","e","splice","effectItem","sort","a","b","map","CreateNewEffect","addEffect","expanded","setExpanded","setName","setTarget","setDetails","setDuration","setDurationType","setConditions","handleSetDurationType","onSubmit","preventDefault","type","placeholder","value","onChange","required","Number","rows","cols","EffectButtons","handleClick","Reset","setEffectsAndResetRounds","filter","effectsToKeep","setEffectsToKeep","effectsToLose","setEffectsToLose","some","effectToSwap","find","newKeepers","newLosers","push","effectsToKeepComponent","effectsToLoseComponent","JumpTurn","jumpNumber","setJumpNumber","jumpSelection","setJumpSelection","go","alert","Modal","newArray","displayContent","App","localStorage","getItem","useEffect","setItem","length","clonedEffectsArray","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.93a8d84b.chunk.js","sourcesContent":["import \"./TurnManipulator.css\";\n\nconst TurnManipulator = ({\n  setTurnNumber,\n  turnNumber,\n  reset,\n  setModal,\n  modal,\n}) => {\n  const previousTurnArrows = \"<<\";\n  const nextTurnArrows = \">>\";\n  const nextTurn = () => setTurnNumber(turnNumber + 1);\n  const previousTurn = () => setTurnNumber(turnNumber - 1);\n  const toggleModal = () => {\n    if (modal === \"jumpTurn\") {\n      setModal(\"off\");\n    } else {\n      setModal(\"jumpTurn\");\n    }\n  };\n  return (\n    <>\n      <div className=\"turnManipulatorButtonsContainer\">\n        <button\n          className=\"basicButton turnManipulatorButton\"\n          onClick={previousTurn}\n        >\n          {previousTurnArrows}\n        </button>\n        <button\n          className={\n            modal === \"jumpTurn\"\n              ? \"basicButton turnManipulatorButton pressed\"\n              : \"basicButton turnManipulatorButton\"\n          }\n          onClick={toggleModal}\n        >\n          Jump\n        </button>\n        <button\n          className=\"basicButton turnManipulatorButton\"\n          onClick={nextTurn}\n        >\n          {nextTurnArrows}\n        </button>\n      </div>\n      <div className=\"resetButtonContainer\">\n        <button\n          className={\n            modal === \"reset\"\n              ? \"resetButton basicButton pressed\"\n              : \"resetButton basicButton\"\n          }\n          onClick={reset}\n        >\n          Reset\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default TurnManipulator;\n","function clone<T>(object: T): T {\n  return JSON.parse(JSON.stringify(object));\n}\n\nfunction getClassName(durationRemaining) {\n  switch (true) {\n    case durationRemaining === Infinity:\n      return \"permanent\";\n    case durationRemaining > 0:\n      return \"active\";\n    case durationRemaining <= 0:\n      return \"expired\";\n    default:\n      return \"\";\n  }\n}\n\nfunction getRoundsToMinutesAndSeconds(rounds) {\n  const minutes = Math.floor(rounds / 10);\n  const seconds = Math.floor((rounds % 10) * 6);\n  return [minutes, seconds];\n}\nfunction getRoundsToHoursAndMinutes(rounds) {\n  const hours = Math.floor(rounds / 600);\n  const minutes = Math.floor((rounds % 600) / 10);\n  return [hours, minutes];\n}\nfunction getRoundsToDaysAndHours(rounds) {\n  const days = Math.floor(rounds / 14400);\n  const hours = Math.floor((rounds % 14400) / 600);\n  return [days, hours];\n}\n\nfunction getRemainingRounds(effect, turnNumber) {\n  let remainingRounds = effect.turnUsed + effect.duration - turnNumber;\n  switch (effect.durationType) {\n    case \"round\":\n      break;\n    case \"minute\":\n      remainingRounds = effect.turnUsed + effect.duration * 10 - turnNumber;\n      break;\n    case \"hour\":\n      remainingRounds = effect.turnUsed + effect.duration * 600 - turnNumber;\n      break;\n    case \"day\":\n      remainingRounds = effect.turnUsed + effect.duration * 14400 - turnNumber;\n      break;\n    case \"permanent\":\n      return Infinity;\n    default:\n      break;\n  }\n  return remainingRounds;\n}\n\nexport {\n  clone,\n  getClassName,\n  getRoundsToMinutesAndSeconds,\n  getRoundsToHoursAndMinutes,\n  getRoundsToDaysAndHours,\n  getRemainingRounds,\n};\n","import { useState } from \"react\";\n\nimport \"./Effects.css\";\n\nimport {\n  clone,\n  getClassName,\n  getRoundsToMinutesAndSeconds,\n  getRoundsToHoursAndMinutes,\n  getRoundsToDaysAndHours,\n  getRemainingRounds,\n} from \"../../utilities\";\n\nconst EffectItem = ({\n  effect,\n  turnNumber,\n  removeEffect,\n  resetEffectDuration,\n}) => {\n  const [toggle, setToggle] = useState(false);\n  const name = effect.name;\n  const target = effect.target;\n  const details = effect.details;\n  const conditions = effect.conditions;\n  const infinitySymbol = \"\\u221e\";\n\n  const remainingRounds = getRemainingRounds(effect, turnNumber);\n\n  const minutesAndSeconds = getRoundsToMinutesAndSeconds(remainingRounds);\n  const hoursAndMinutes = getRoundsToHoursAndMinutes(remainingRounds);\n  const daysAndHours = getRoundsToDaysAndHours(remainingRounds);\n\n  function formatRoundsRemaing(remainingRounds) {\n    if (remainingRounds === Infinity) {\n      return infinitySymbol;\n    } else if (remainingRounds < 20) {\n      return remainingRounds + \" rounds\";\n    } else if (remainingRounds >= 20 && remainingRounds < 600) {\n      return minutesAndSeconds[0] + \"m \" + minutesAndSeconds[1] + \"s\";\n    } else if (remainingRounds >= 600 && remainingRounds < 14400) {\n      return hoursAndMinutes[0] + \"h \" + hoursAndMinutes[1] + \"m\";\n    } else if (remainingRounds >= 14400) {\n      return daysAndHours[0] + \"d \" + daysAndHours[1] + \"h\";\n    }\n  }\n\n  const remainingTime = formatRoundsRemaing(remainingRounds);\n\n  const additionalClass = getClassName(remainingRounds);\n\n  const resetDuration = () => resetEffectDuration(effect);\n\n  return (\n    <div\n      role=\"button\"\n      className={\n        toggle\n          ? additionalClass + \" effectContainer insetContainer\"\n          : additionalClass + \" effectContainer\"\n      }\n      onClick={() => setToggle(!toggle)}\n    >\n      <p className=\"effectItem\">\n        <span className=\"effectKeys\">Name</span> - {name}\n      </p>\n      <p className=\"effectItem\">\n        <span className=\"effectKeys\">Time Left</span> - {remainingTime}\n      </p>\n      {toggle ? (\n        <>\n          <div className=\"break\"></div>\n          {target !== \"\" ? (\n            <p className=\"effectItem\">\n              <span className=\"effectKeys\">Target</span> - {target}\n            </p>\n          ) : null}\n          {details !== \"\" ? (\n            <p className=\"effectItem\">\n              <span className=\"effectKeys\">Details</span> - {details}\n            </p>\n          ) : null}\n          {conditions !== \"\" ? (\n            <p className=\"effectItem\">\n              <span className=\"effectKeys\">Conditions</span> - {conditions}\n            </p>\n          ) : null}\n          <div className=\"break\"></div>\n          <div className=\"endResetEffectButtonContainer\">\n            <button\n              className=\"basicButton resetEffectButton\"\n              onClick={resetDuration}\n            >\n              Reset Duration\n            </button>\n            <button\n              className=\"basicButton endEffectButton\"\n              onClick={() => removeEffect(effect)}\n            >\n              End Effect\n            </button>\n          </div>\n        </>\n      ) : null}\n    </div>\n  );\n};\n\nconst Effects = ({ turnNumber, effects, setEffects }) => {\n  const removeEffect = (effect) => {\n    const newEffectsArray = clone(effects);\n    const index = newEffectsArray.findIndex((e) => e.name === effect.name);\n    newEffectsArray.splice(index, 1);\n    setEffects(newEffectsArray);\n  };\n  const resetEffectDuration = (effect) => {\n    const newEffectsArray = clone(effects);\n    const index = newEffectsArray.findIndex((e) => e.name === effect.name);\n    newEffectsArray[index].turnUsed = turnNumber;\n    setEffects(newEffectsArray);\n  };\n\n  const sortedEffects = effects.sort((a, b) => {\n    const remainingRoundsA = getRemainingRounds(a, turnNumber);\n    const remainingRoundsB = getRemainingRounds(b, turnNumber);\n    return remainingRoundsA > remainingRoundsB ? 1 : -1;\n  });\n\n  const effectItem = sortedEffects.map((effect) => (\n    <EffectItem\n      effect={effect}\n      removeEffect={removeEffect}\n      turnNumber={turnNumber}\n      key={effect.name}\n      resetEffectDuration={resetEffectDuration}\n    />\n  ));\n  return <>{effectItem}</>;\n};\n\nexport default Effects;\n","import { useState } from \"react\";\n\nimport \"./CreateNewEffect.css\";\n\nconst CreateNewEffect = ({ addEffect, turnNumber, setToggle }) => {\n  const [expanded, setExpanded] = useState(false);\n  const [name, setName] = useState(\"\");\n  const [target, setTarget] = useState(\"\");\n  const [details, setDetails] = useState(\"\");\n  const [duration, setDuration] = useState(1);\n  const [durationType, setDurationType] = useState(\"round\");\n  const [conditions, setConditions] = useState(\"\");\n  let effect = {\n    name: name,\n    target: target,\n    details: details,\n    duration: duration,\n    durationType: durationType,\n    conditions: conditions,\n    turnUsed: turnNumber,\n  };\n  const expandOptions = () => {\n    setExpanded(!expanded);\n  };\n  const handleSetDurationType = (durationType) => {\n    setDurationType(durationType);\n    setExpanded(false);\n  };\n  const handlePermanentDuration = () => {\n    if (effect.durationType === \"permanent\") {\n      effect.duration = Infinity;\n    }\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    handlePermanentDuration();\n    addEffect(effect);\n    setName(\"\");\n    setTarget(\"\");\n    setDetails(\"\");\n    setDuration(1);\n    setDurationType(\"round\");\n    setConditions(\"\");\n    setToggle(false);\n  };\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <div className=\"formContainer\">\n          <fieldset className=\"formItem insetContainer\">\n            <legend className=\"formItemTitle\">Name</legend>\n            <div className=\"textInputContainer\">\n              <input\n                type=\"text\"\n                placeholder=\"name of effect\"\n                className=\"textInput\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                required\n              />\n            </div>\n            <p className=\"requiredText\">* required</p>\n          </fieldset>\n          <fieldset className=\"formItem insetContainer\">\n            <legend className=\"formItemTitle\">Duration</legend>\n            <div className=\"durationInputContainer\">\n              <div className=\"numberInputContainer\">\n                <input\n                  className=\"durationNumberInput textInput\"\n                  type=\"number\"\n                  value={duration}\n                  onChange={(e) => setDuration(Number(e.target.value))}\n                  required\n                />\n              </div>\n              {/*Couldn't use buttons here, applied 'button' role*/}\n              {expanded ? null : (\n                <div\n                  role=\"button\"\n                  className={\n                    durationType === \"permanent\"\n                      ? \"durationTypeSelector basicButton permanent\"\n                      : \"durationTypeSelector basicButton\"\n                  }\n                  value={durationType === \"\" ? \"round\" : durationType}\n                  onClick={expandOptions}\n                >\n                  {durationType === \"permanent\"\n                    ? durationType\n                    : durationType + \"(s)\"}\n                </div>\n              )}\n              {expanded ? (\n                <div className=\"durationTypeSelectorOptionsContainer\">\n                  <div\n                    role=\"button\"\n                    className=\"durationTypeSelectorOptions basicButton\"\n                    value=\"round\"\n                    onClick={() => handleSetDurationType(\"round\")}\n                  >\n                    round(s)\n                  </div>\n                  <div\n                    role=\"button\"\n                    className=\"durationTypeSelectorOptions basicButton\"\n                    value=\"minute\"\n                    onClick={() => handleSetDurationType(\"minute\")}\n                  >\n                    minute(s)\n                  </div>\n                  <div\n                    role=\"button\"\n                    className=\"durationTypeSelectorOptions basicButton\"\n                    value=\"hour\"\n                    onClick={() => handleSetDurationType(\"hour\")}\n                  >\n                    hour(s)\n                  </div>\n                  <div\n                    role=\"button\"\n                    className=\"durationTypeSelectorOptions basicButton\"\n                    value=\"day\"\n                    onClick={() => handleSetDurationType(\"day\")}\n                  >\n                    day(s)\n                  </div>\n                  <div\n                    role=\"button\"\n                    className=\"durationTypeSelectorOptions permanent basicButton\"\n                    value=\"permanent\"\n                    onClick={() => handleSetDurationType(\"permanent\")}\n                  >\n                    permanent\n                  </div>\n                </div>\n              ) : null}\n            </div>{\" \"}\n            <p className=\"requiredText\">* required</p>\n          </fieldset>\n          <fieldset className=\"formItem insetContainer\">\n            <legend className=\"formItemTitle\">Target or Area</legend>\n            <div className=\"textAreaInputContainer\">\n              <textarea\n                rows=\"3\"\n                cols=\"30\"\n                className=\"textAreaInput\"\n                placeholder=\"who or what is affected\"\n                value={target}\n                onChange={(e) => setTarget(e.target.value)}\n              />\n            </div>\n          </fieldset>\n          <fieldset className=\"formItem insetContainer\">\n            <legend className=\"formItemTitle\">Details</legend>\n            <div className=\"textAreaInputContainer\">\n              <textarea\n                rows=\"3\"\n                cols=\"30\"\n                className=\"textAreaInput\"\n                placeholder='breif description what effect does. ex.: \"+4 armor bonus\"'\n                value={details}\n                onChange={(e) => setDetails(e.target.value)}\n              />\n            </div>\n          </fieldset>\n          <fieldset className=\"formItem insetContainer\">\n            <legend className=\"formItemTitle\">Conditions</legend>{\" \"}\n            <div className=\"textAreaInputContainer\">\n              <textarea\n                rows=\"3\"\n                cols=\"30\"\n                className=\"textAreaInput\"\n                placeholder=\"ex.: must be within 60' of Sabri\"\n                value={conditions}\n                onChange={(e) => setConditions(e.target.value)}\n              />\n            </div>\n          </fieldset>\n          <div className=\"break\"></div>\n          <div className=\"addEffectButtonContainer\">\n            <input className=\"basicButton addEffectButton\" type=\"submit\" />\n          </div>\n        </div>\n      </form>\n    </>\n  );\n};\n\nexport default CreateNewEffect;\n","import { useState } from \"react\";\n\nimport { clone, getRemainingRounds, getClassName } from \"../../utilities\";\n\nimport \"./Modal.css\";\n\nconst EffectButtons = ({ effect, handleClick, turnNumber }) => {\n  const remainingRounds = getRemainingRounds(effect, turnNumber);\n  const additionalClass = getClassName(remainingRounds);\n\n  return (\n    <div className=\"effectButtonContainer\">\n      <button\n        key={effect.name}\n        value={effect.name}\n        className={additionalClass + \" effectButton basicButton\"}\n        onClick={(e) => handleClick(e)}\n      >\n        {effect.name}\n      </button>\n    </div>\n  );\n};\n\nconst Reset = ({ effects, setEffectsAndResetRounds, turnNumber }) => {\n  const [effectsToKeep, setEffectsToKeep] = useState(\n    effects.filter((e) => e.durationType === \"permanent\")\n  );\n  const [effectsToLose, setEffectsToLose] = useState(\n    effects.filter((e) => e.durationType !== \"permanent\")\n  );\n  const handleClick = (e) => {\n    const name = e.target.value;\n    if (effectsToKeep.some((effect) => effect.name === name)) {\n      const index = effectsToKeep.findIndex((effect) => effect.name === name);\n      const effectToSwap = effectsToKeep.find((effect) => effect.name === name);\n      const newKeepers = clone(effectsToKeep);\n      const newLosers = clone(effectsToLose);\n      newKeepers.splice(index, 1);\n      newLosers.push(effectToSwap);\n      setEffectsToKeep(newKeepers);\n      setEffectsToLose(newLosers);\n    } else {\n      const index = effectsToLose.findIndex((effect) => effect.name === name);\n      const effectToSwap = effectsToLose.find((effect) => effect.name === name);\n      const newKeepers = clone(effectsToKeep);\n      const newLosers = clone(effectsToLose);\n      newLosers.splice(index, 1);\n      newKeepers.push(effectToSwap);\n      setEffectsToKeep(newKeepers);\n      setEffectsToLose(newLosers);\n    }\n  };\n\n  const setEffects = () => setEffectsAndResetRounds(effectsToKeep);\n\n  const effectsToKeepComponent = effectsToKeep.map((effect) => (\n    <EffectButtons\n      key={effect.name}\n      handleClick={handleClick}\n      turnNumber={turnNumber}\n      effect={effect}\n    />\n  ));\n  const effectsToLoseComponent = effectsToLose.map((effect) => (\n    <EffectButtons\n      key={effect.name}\n      handleClick={handleClick}\n      turnNumber={turnNumber}\n      effect={effect}\n    />\n  ));\n\n  return (\n    <>\n      <div className=\"keepEffectsContainer\">\n        <h4 className=\"keepEffectsHeader\">Current Effects</h4>\n        <div className=\"keepLoseHeaders\">\n          <p className=\"smallHeaders\">Keep</p>\n          <p className=\"smallHeaders\">Lose</p>\n        </div>\n        <div className=\"listOfEffectsContainer\">\n          <div className=\"effectsToKeepContainer insetContainer\">\n            {effectsToKeepComponent}\n          </div>\n          <div className=\"effectsToLoseContainer insetContainer\">\n            {effectsToLoseComponent}\n          </div>\n        </div>\n        <div className=\"confirmKeepersButtonContainer\">\n          <button\n            className=\"basicButton confirmKeepersButton\"\n            onClick={setEffects}\n          >\n            Confirm Reset\n          </button>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst JumpTurn = ({ setTurnNumber, turnNumber }) => {\n  const [jumpNumber, setJumpNumber] = useState(1);\n  const [jumpSelection, setJumpSelection] = useState(\"forward\");\n  const jumpForward = () => setTurnNumber(turnNumber + jumpNumber);\n  const jumpBackward = () => setTurnNumber(turnNumber - jumpNumber);\n  const goTo = () => setTurnNumber(jumpNumber);\n  const go = (jumpSelection) => {\n    switch (jumpSelection) {\n      case \"forward\":\n        jumpForward();\n        break;\n      case \"backward\":\n        jumpBackward();\n        break;\n      case \"goTo\":\n        goTo();\n        break;\n      default:\n        alert(\"Something went wrong.\");\n    }\n  };\n  return (\n    <>\n      <div className=\"jumpTurnContentContainer\">\n        <div className=\"jumpOptionsButtonContainer\">\n          <button\n            className={\n              jumpSelection === \"forward\"\n                ? \"jumpOptionsButton basicButton pressed\"\n                : \"jumpOptionsButton basicButton\"\n            }\n            value=\"forward\"\n            onClick={(e) => setJumpSelection(e.target.value)}\n          >\n            Number of rounds forward\n          </button>\n          <button\n            className={\n              jumpSelection === \"backward\"\n                ? \"jumpOptionsButton basicButton pressed\"\n                : \"jumpOptionsButton basicButton\"\n            }\n            value=\"backward\"\n            onClick={(e) => setJumpSelection(e.target.value)}\n          >\n            Number of rounds backward\n          </button>\n          <button\n            className={\n              jumpSelection === \"goTo\"\n                ? \"jumpOptionsButton basicButton pressed\"\n                : \"jumpOptionsButton basicButton\"\n            }\n            value=\"goTo\"\n            onClick={(e) => setJumpSelection(e.target.value)}\n          >\n            To specified round\n          </button>\n        </div>\n        <div className=\"jumpNumberInputAndGoButtonContainer\">\n          <div className=\"numberInputContainer\">\n            <input\n              type=\"number\"\n              className=\"durationNumberInput textInput jumpNumberInput\"\n              value={jumpNumber}\n              onChange={(e) => setJumpNumber(Number(e.target.value))}\n            />\n          </div>\n          <button\n            className=\"goButton basicButton\"\n            onClick={() => go(jumpSelection)}\n          >\n            Go\n          </button>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst Modal = ({\n  setModal,\n  modal,\n  setTurnNumber,\n  turnNumber,\n  effects,\n  setEffects,\n}) => {\n  const closeModal = () => setModal(\"off\");\n  const setEffectsAndResetRounds = (newArray) => {\n    setEffects(newArray);\n    setTurnNumber(1);\n    setModal(\"off\");\n  };\n  const displayContent = (modal) => {\n    switch (modal) {\n      case \"jumpTurn\":\n        return (\n          <JumpTurn setTurnNumber={setTurnNumber} turnNumber={turnNumber} />\n        );\n      case \"reset\":\n        return (\n          <Reset\n            effects={effects}\n            setEffectsAndResetRounds={setEffectsAndResetRounds}\n            turnNumber={turnNumber}\n          />\n        );\n      default:\n        return \"\";\n    }\n  };\n\n  return (\n    <>\n      <div className=\"modalBody topContainer\">\n        <div className=\"modalContent\">{displayContent(modal)}</div>\n        <div className=\"closeModalButtonContainer\">\n          <button className=\"basicButton closeModalButton\" onClick={closeModal}>\n            {modal === \"jumpTurn\" ? \"Close\" : \"Cancel\"}\n          </button>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Modal;\n","import { useState, useEffect } from \"react\";\n\nimport \"./App.css\";\n\nimport TurnManipulator from \"../TurnManipulator/TurnManipulator\";\nimport Effects from \"../Effects/Effects\";\nimport CreateNewEffect from \"../CreateNewEffect/CreateNewEffect\";\nimport Modal from \"../Modal/Modal\";\n\nimport { clone } from \"../../utilities.js\";\n\nfunction App() {\n  const [turnNumber, setTurnNumber] = useState(\n    Number(localStorage.getItem(\"turnNumber\")) || 1\n  );\n  const [effects, setEffects] = useState(\n    JSON.parse(localStorage.getItem(\"effects\")) || []\n  );\n  const [toggle, setToggle] = useState(false);\n  const [modal, setModal] = useState(\"off\");\n  useEffect(() => {\n    localStorage.setItem(\"effects\", JSON.stringify(effects));\n  }, [effects]);\n  useEffect(() => {\n    localStorage.setItem(\"turnNumber\", turnNumber);\n  }, [turnNumber]);\n  const reset = () => {\n    if (modal === \"reset\") {\n      setModal(\"off\");\n    } else if (effects.length > 0) {\n      setModal(\"reset\");\n    } else {\n      setTurnNumber(1);\n    }\n  };\n\n  const addEffect = (effect) => {\n    const clonedEffectsArray = clone(effects);\n    clonedEffectsArray.push(effect);\n    setEffects(clonedEffectsArray);\n  };\n  return (\n    <div className=\"app\">\n      <div className=\"shadow\">\n        <div className=\"topContainer\">\n          <h1 className=\"title\">Effect Tracker</h1>\n          <h2 className=\"turnCount\">Turn {turnNumber}</h2>\n          <TurnManipulator\n            setTurnNumber={setTurnNumber}\n            turnNumber={turnNumber}\n            reset={reset}\n            setModal={setModal}\n            modal={modal}\n          />\n          <br />\n          <div className=\"newEffectButtonContainer\">\n            <button\n              className={\n                toggle\n                  ? \"newEffectButton basicButton pressed\"\n                  : \"newEffectButton basicButton\"\n              }\n              onClick={() => setToggle(!toggle)}\n            >\n              New Effect\n            </button>\n          </div>\n          {toggle ? (\n            <CreateNewEffect\n              addEffect={addEffect}\n              turnNumber={turnNumber}\n              setToggle={setToggle}\n            />\n          ) : null}\n          {modal !== \"off\" ? (\n            <Modal\n              setModal={setModal}\n              modal={modal}\n              turnNumber={turnNumber}\n              setTurnNumber={setTurnNumber}\n              effects={effects}\n              setEffects={setEffects}\n            />\n          ) : null}\n        </div>\n        <div className=\"effectsListContainer\">\n          <Effects\n            turnNumber={turnNumber}\n            effects={effects}\n            setEffects={setEffects}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Components/App/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}