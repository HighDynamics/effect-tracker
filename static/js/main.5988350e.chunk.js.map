{"version":3,"sources":["Components/TurnManipulator/TurnManipulator.js","utilities.js","Components/CreateNewEffect/CreateNewEffect.js","Components/Effects/Effects.js","Components/Modal/Modal.js","Components/ManageTrackers/ManageTrackers.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["TurnManipulator","turnNumber","reset","setModal","modal","changeTurn","className","onClick","clone","object","JSON","parse","stringify","getClassName","durationRemaining","Infinity","getRemainingRounds","effect","remainingRounds","turnUsed","duration","durationType","CreateNewEffect","addEffect","setToggle","currentEffect","setToggleEdit","confirmEditEffect","useState","expanded","setExpanded","name","setName","target","setTarget","details","setDetails","setDuration","setDurationType","conditions","setConditions","handleSetDurationType","handlePermanentDuration","onSubmit","e","preventDefault","console","log","type","placeholder","value","onChange","required","Number","role","rows","cols","EffectItem","rounds","removeEffect","resetEffectDuration","editEffect","toggle","toggleEdit","minutesAndSeconds","Math","floor","hoursAndMinutes","getRoundsToHoursAndMinutes","daysAndHours","getRoundsToDaysAndHours","remainingTime","formatRoundsRemaing","additionalClass","Effects","effects","setEffects","tracker","sortedEffects","sort","a","b","effectToEdit","newEffect","newEffectsArray","index","findIndex","effectItem","map","EffectButtons","handleClick","Reset","setEffectsAndResetRounds","filter","effectsToKeep","setEffectsToKeep","effectsToLose","setEffectsToLose","some","effectToSwap","find","newKeepers","newLosers","splice","push","effectsToKeepComponent","effectsToLoseComponent","JumpTurn","jumpNumber","setJumpNumber","jumpSelection","setJumpSelection","Modal","newArray","turn","displayContent","ManageTrackers","setTracker","addEditTracker","newTrackerName","prompt","Object","keys","length","hasOwnProperty","alert","newEffectsObject","listName","undefined","App","localStorage","getItem","toggleNewEffect","setToggleNewEffect","toggleManageTrackers","setToggleManageTrackers","useEffect","setItem","number","direction","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5988350e.chunk.js","sourcesContent":["import \"./TurnManipulator.css\";\n\nconst TurnManipulator = ({\n  turnNumber,\n  reset,\n  setModal,\n  modal,\n  changeTurn,\n}) => {\n  const previousTurnArrows = \"<<\";\n  const nextTurnArrows = \">>\";\n  const nextTurn = () => changeTurn(1, \"forward\");\n  const previousTurn = () => changeTurn(1, \"backward\");\n  const toggleModal = () => {\n    if (modal === \"jumpTurn\") {\n      setModal(\"off\");\n    } else {\n      setModal(\"jumpTurn\");\n    }\n  };\n  return (\n    <>\n      <div className=\"turnManipulatorButtonsContainer\">\n        <button\n          className=\"basicButton turnManipulatorButton\"\n          onClick={previousTurn}\n        >\n          {previousTurnArrows}\n        </button>\n        <button\n          className={\n            modal === \"jumpTurn\"\n              ? \"basicButton turnManipulatorButton pressed\"\n              : \"basicButton turnManipulatorButton\"\n          }\n          onClick={toggleModal}\n        >\n          Jump\n        </button>\n        <button\n          className=\"basicButton turnManipulatorButton\"\n          onClick={nextTurn}\n        >\n          {nextTurnArrows}\n        </button>\n      </div>\n      <div className=\"resetButtonContainer\">\n        <button\n          className={\n            modal === \"reset\"\n              ? \"resetButton basicButton pressed\"\n              : \"resetButton basicButton\"\n          }\n          onClick={reset}\n        >\n          Reset\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default TurnManipulator;\n","function clone<T>(object: T): T {\n  return JSON.parse(JSON.stringify(object));\n}\n\nfunction getClassName(durationRemaining) {\n  switch (true) {\n    case durationRemaining === Infinity:\n      return \"permanent\";\n    case durationRemaining > 0:\n      return \"active\";\n    case durationRemaining <= 0:\n      return \"expired\";\n    default:\n      return \"\";\n  }\n}\n\nfunction getRoundsToMinutesAndSeconds(rounds) {\n  const minutes = Math.floor(rounds / 10);\n  const seconds = Math.floor((rounds % 10) * 6);\n  return [minutes, seconds];\n}\nfunction getRoundsToHoursAndMinutes(rounds) {\n  const hours = Math.floor(rounds / 600);\n  const minutes = Math.floor((rounds % 600) / 10);\n  return [hours, minutes];\n}\nfunction getRoundsToDaysAndHours(rounds) {\n  const days = Math.floor(rounds / 14400);\n  const hours = Math.floor((rounds % 14400) / 600);\n  return [days, hours];\n}\n\nfunction getRemainingRounds(effect, turnNumber) {\n  let remainingRounds = effect.turnUsed + effect.duration - turnNumber;\n  switch (effect.durationType) {\n    case \"round\":\n      break;\n    case \"minute\":\n      remainingRounds = effect.turnUsed + effect.duration * 10 - turnNumber;\n      break;\n    case \"hour\":\n      remainingRounds = effect.turnUsed + effect.duration * 600 - turnNumber;\n      break;\n    case \"day\":\n      remainingRounds = effect.turnUsed + effect.duration * 14400 - turnNumber;\n      break;\n    case \"permanent\":\n      return Infinity;\n    default:\n      break;\n  }\n  return remainingRounds;\n}\nexport {\n  clone,\n  getClassName,\n  getRoundsToMinutesAndSeconds,\n  getRoundsToHoursAndMinutes,\n  getRoundsToDaysAndHours,\n  getRemainingRounds,\n};\n","import { useState } from \"react\";\n\nimport \"./CreateNewEffect.css\";\n\nconst CreateNewEffect = ({\n  addEffect,\n  turnNumber,\n  setToggle,\n  currentEffect,\n  setToggleEdit,\n  confirmEditEffect,\n}) => {\n  const [expanded, setExpanded] = useState(false);\n  const [name, setName] = useState(currentEffect ? currentEffect.name : \"\");\n  const [target, setTarget] = useState(\n    currentEffect ? currentEffect.target : \"\"\n  );\n  const [details, setDetails] = useState(\n    currentEffect ? currentEffect.details : \"\"\n  );\n  const [duration, setDuration] = useState(\n    currentEffect ? currentEffect.duration : 1\n  );\n  const [durationType, setDurationType] = useState(\n    currentEffect ? currentEffect.durationType : \"round\"\n  );\n  const [conditions, setConditions] = useState(\n    currentEffect ? currentEffect.conditions : \"\"\n  );\n  const turnUsed = currentEffect ? currentEffect.turnUsed : turnNumber;\n\n  let effect = {\n    name: name,\n    target: target,\n    details: details,\n    duration: duration,\n    durationType: durationType,\n    conditions: conditions,\n    turnUsed: turnUsed,\n  };\n  const expandOptions = () => {\n    setExpanded(!expanded);\n  };\n  const handleSetDurationType = (durationType) => {\n    setDurationType(durationType);\n    setExpanded(false);\n  };\n  const handlePermanentDuration = () => {\n    if (effect.durationType === \"permanent\") {\n      effect.duration = Infinity;\n    }\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (currentEffect) {\n      handlePermanentDuration();\n      confirmEditEffect(effect);\n      console.log(effect);\n      setName(\"\");\n      setTarget(\"\");\n      setDetails(\"\");\n      setDuration(1);\n      setDurationType(\"round\");\n      setConditions(\"\");\n      setToggleEdit(false);\n    } else {\n      handlePermanentDuration();\n      addEffect(effect);\n      setName(\"\");\n      setTarget(\"\");\n      setDetails(\"\");\n      setDuration(1);\n      setDurationType(\"round\");\n      setConditions(\"\");\n      setToggle(false);\n    }\n  };\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <div className=\"formContainer\">\n          <fieldset className=\"formItem insetContainer\">\n            <legend className=\"formItemTitle\">Name</legend>\n            <div className=\"textInputContainer\">\n              <input\n                type=\"text\"\n                placeholder=\"name of effect\"\n                className=\"textInput\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                required\n              />\n            </div>\n            <p className=\"requiredText\">* required</p>\n          </fieldset>\n          <fieldset className=\"formItem insetContainer\">\n            <legend className=\"formItemTitle\">Duration</legend>\n            <div className=\"durationInputContainer\">\n              <div className=\"numberInputContainer\">\n                <input\n                  className=\"durationNumberInput textInput\"\n                  type=\"number\"\n                  value={duration}\n                  onChange={(e) => setDuration(Number(e.target.value))}\n                  required\n                />\n              </div>\n              {/*Couldn't use buttons here, applied 'button' role*/}\n              {expanded ? null : (\n                <div\n                  role=\"button\"\n                  className={\n                    durationType === \"permanent\"\n                      ? \"durationTypeSelector basicButton permanent\"\n                      : \"durationTypeSelector basicButton\"\n                  }\n                  value={durationType === \"\" ? \"round\" : durationType}\n                  onClick={expandOptions}\n                >\n                  {durationType === \"permanent\"\n                    ? durationType\n                    : durationType + \"(s)\"}\n                </div>\n              )}\n              {expanded ? (\n                <div className=\"durationTypeSelectorOptionsContainer\">\n                  <div\n                    role=\"button\"\n                    className=\"durationTypeSelectorOptions basicButton\"\n                    value=\"round\"\n                    onClick={() => handleSetDurationType(\"round\")}\n                  >\n                    round(s)\n                  </div>\n                  <div\n                    role=\"button\"\n                    className=\"durationTypeSelectorOptions basicButton\"\n                    value=\"minute\"\n                    onClick={() => handleSetDurationType(\"minute\")}\n                  >\n                    minute(s)\n                  </div>\n                  <div\n                    role=\"button\"\n                    className=\"durationTypeSelectorOptions basicButton\"\n                    value=\"hour\"\n                    onClick={() => handleSetDurationType(\"hour\")}\n                  >\n                    hour(s)\n                  </div>\n                  <div\n                    role=\"button\"\n                    className=\"durationTypeSelectorOptions basicButton\"\n                    value=\"day\"\n                    onClick={() => handleSetDurationType(\"day\")}\n                  >\n                    day(s)\n                  </div>\n                  <div\n                    role=\"button\"\n                    className=\"durationTypeSelectorOptions permanent basicButton\"\n                    value=\"permanent\"\n                    onClick={() => handleSetDurationType(\"permanent\")}\n                  >\n                    permanent\n                  </div>\n                </div>\n              ) : null}\n            </div>{\" \"}\n            <p className=\"requiredText\">* required</p>\n          </fieldset>\n          <fieldset className=\"formItem insetContainer\">\n            <legend className=\"formItemTitle\">Target or Area</legend>\n            <div className=\"textAreaInputContainer\">\n              <textarea\n                rows=\"3\"\n                cols=\"30\"\n                className=\"textAreaInput\"\n                placeholder=\"who or what is affected\"\n                value={target}\n                onChange={(e) => setTarget(e.target.value)}\n              />\n            </div>\n          </fieldset>\n          <fieldset className=\"formItem insetContainer\">\n            <legend className=\"formItemTitle\">Details</legend>\n            <div className=\"textAreaInputContainer\">\n              <textarea\n                rows=\"3\"\n                cols=\"30\"\n                className=\"textAreaInput\"\n                placeholder='breif description what effect does. ex.: \"+4 armor bonus\"'\n                value={details}\n                onChange={(e) => setDetails(e.target.value)}\n              />\n            </div>\n          </fieldset>\n          <fieldset className=\"formItem insetContainer\">\n            <legend className=\"formItemTitle\">Conditions</legend>{\" \"}\n            <div className=\"textAreaInputContainer\">\n              <textarea\n                rows=\"3\"\n                cols=\"30\"\n                className=\"textAreaInput\"\n                placeholder=\"ex.: must be within 60' of Sabri\"\n                value={conditions}\n                onChange={(e) => setConditions(e.target.value)}\n              />\n            </div>\n          </fieldset>\n          <div className=\"break\"></div>\n          <div className=\"addEffectButtonContainer\">\n            <input className=\"basicButton addEffectButton\" type=\"submit\" />\n            {currentEffect ? (\n              <button\n                className=\"basicButton cancelEditButton\"\n                onClick={() => setToggleEdit(false)}\n              >\n                Cancel\n              </button>\n            ) : null}\n          </div>\n        </div>\n      </form>\n    </>\n  );\n};\n\nexport default CreateNewEffect;\n","import { useState } from \"react\";\n\nimport \"./Effects.css\";\n\nimport { clone } from \"../../utilities\";\n\nimport CreateNewEffect from \"../CreateNewEffect/CreateNewEffect\";\n\nimport {\n  getClassName,\n  getRoundsToMinutesAndSeconds,\n  getRoundsToHoursAndMinutes,\n  getRoundsToDaysAndHours,\n  getRemainingRounds,\n} from \"../../utilities\";\n\nconst EffectItem = ({\n  effect,\n  turnNumber,\n  removeEffect,\n  resetEffectDuration,\n  editEffect,\n}) => {\n  const [toggle, setToggle] = useState(false);\n  const [toggleEdit, setToggleEdit] = useState(false);\n  const name = effect.name;\n  const target = effect.target;\n  const details = effect.details;\n  const conditions = effect.conditions;\n  const infinitySymbol = \"\\u221e\";\n\n  const remainingRounds = getRemainingRounds(effect, turnNumber);\n\n  const minutesAndSeconds = getRoundsToMinutesAndSeconds(remainingRounds);\n  const hoursAndMinutes = getRoundsToHoursAndMinutes(remainingRounds);\n  const daysAndHours = getRoundsToDaysAndHours(remainingRounds);\n\n  function formatRoundsRemaing(remainingRounds) {\n    if (remainingRounds === Infinity) {\n      return infinitySymbol;\n    } else if (remainingRounds < 20) {\n      return remainingRounds + \" rounds\";\n    } else if (remainingRounds >= 20 && remainingRounds < 600) {\n      return minutesAndSeconds[0] + \"m \" + minutesAndSeconds[1] + \"s\";\n    } else if (remainingRounds >= 600 && remainingRounds < 14400) {\n      return hoursAndMinutes[0] + \"h \" + hoursAndMinutes[1] + \"m\";\n    } else if (remainingRounds >= 14400) {\n      return daysAndHours[0] + \"d \" + daysAndHours[1] + \"h\";\n    }\n  }\n\n  const remainingTime = formatRoundsRemaing(remainingRounds);\n\n  const additionalClass = getClassName(remainingRounds);\n\n  const resetDuration = () => resetEffectDuration(effect);\n\n  const confirmEditEffect = editEffect(effect);\n\n  return (\n    <>\n      <div\n        role=\"button\"\n        className={\n          toggle\n            ? additionalClass + \" effectContainer insetContainer\"\n            : additionalClass + \" effectContainer\"\n        }\n        onClick={() => setToggle(!toggle)}\n      >\n        <p className=\"effectItem\">\n          <span className=\"effectKeys\">Name</span> - {name}\n        </p>\n        <p className=\"effectItem\">\n          <span className=\"effectKeys\">Time Left</span> - {remainingTime}\n        </p>\n        {toggle ? (\n          <>\n            <div className=\"break\"></div>\n            {target !== \"\" ? (\n              <p className=\"effectItem\">\n                <span className=\"effectKeys\">Target</span> - {target}\n              </p>\n            ) : null}\n            {details !== \"\" ? (\n              <p className=\"effectItem\">\n                <span className=\"effectKeys\">Details</span> - {details}\n              </p>\n            ) : null}\n            {conditions !== \"\" ? (\n              <p className=\"effectItem\">\n                <span className=\"effectKeys\">Conditions</span> - {conditions}\n              </p>\n            ) : null}\n            <div className=\"break\"></div>\n            <div className=\"endResetEffectButtonContainer\">\n              <button\n                className=\"basicButton resetEffectButton\"\n                onClick={resetDuration}\n              >\n                Reset Duration\n              </button>\n              <button\n                className={\n                  toggleEdit\n                    ? \"basicButton editEffectButton pressed\"\n                    : \"basicButton editEffectButton\"\n                }\n                onClick={() => setToggleEdit(!toggleEdit)}\n              >\n                Edit\n              </button>\n              <button\n                className=\"basicButton endEffectButton\"\n                onClick={() => removeEffect(effect)}\n              >\n                End\n              </button>\n            </div>\n          </>\n        ) : null}\n      </div>\n      {toggleEdit ? (\n        <CreateNewEffect\n          currentEffect={effect}\n          setToggleEdit={setToggleEdit}\n          confirmEditEffect={confirmEditEffect}\n        />\n      ) : null}\n    </>\n  );\n};\n\nconst Effects = ({\n  turnNumber,\n  effects,\n  setEffects,\n  removeEffect,\n  resetEffectDuration,\n  tracker,\n}) => {\n  const sortedEffects = effects[tracker].effects.sort((a, b) => {\n    const remainingRoundsA = getRemainingRounds(a, turnNumber);\n    const remainingRoundsB = getRemainingRounds(b, turnNumber);\n    return remainingRoundsA > remainingRoundsB ? 1 : -1;\n  });\n\n  const editEffect = (effectToEdit) => (newEffect) => {\n    const newEffectsArray = clone(effects);\n    const index = effects[tracker].effects.findIndex(\n      (effect) => effect.name === effectToEdit.name\n    );\n    newEffectsArray[tracker].effects[index] = newEffect;\n    setEffects(newEffectsArray);\n  };\n\n  const effectItem = sortedEffects.map((effect) => (\n    <EffectItem\n      effect={effect}\n      removeEffect={removeEffect}\n      turnNumber={turnNumber}\n      key={effect.name}\n      resetEffectDuration={resetEffectDuration}\n      editEffect={editEffect}\n    />\n  ));\n  return <>{effectItem}</>;\n};\n\nexport default Effects;\n","import { useState } from \"react\";\n\nimport { clone, getRemainingRounds, getClassName } from \"../../utilities\";\n\nimport \"./Modal.css\";\n\nconst EffectButtons = ({ effect, handleClick, turnNumber }) => {\n  const remainingRounds = getRemainingRounds(effect, turnNumber);\n  const additionalClass = getClassName(remainingRounds);\n\n  return (\n    <div className=\"effectButtonContainer\">\n      <button\n        key={effect.name}\n        value={effect.name}\n        className={additionalClass + \" effectButton basicButton\"}\n        onClick={(e) => handleClick(e)}\n      >\n        {effect.name}\n      </button>\n    </div>\n  );\n};\n\nconst Reset = ({ effects, setEffectsAndResetRounds, turnNumber }) => {\n  const [effectsToKeep, setEffectsToKeep] = useState(\n    effects.filter((e) => e.durationType === \"permanent\")\n  );\n  const [effectsToLose, setEffectsToLose] = useState(\n    effects.filter((e) => e.durationType !== \"permanent\")\n  );\n  const handleClick = (e) => {\n    const name = e.target.value;\n    if (effectsToKeep.some((effect) => effect.name === name)) {\n      const index = effectsToKeep.findIndex((effect) => effect.name === name);\n      const effectToSwap = effectsToKeep.find((effect) => effect.name === name);\n      const newKeepers = clone(effectsToKeep);\n      const newLosers = clone(effectsToLose);\n      newKeepers.splice(index, 1);\n      newLosers.push(effectToSwap);\n      setEffectsToKeep(newKeepers);\n      setEffectsToLose(newLosers);\n      console.log(effectsToKeep);\n      console.log(effectsToLose);\n    } else {\n      const index = effectsToLose.findIndex((effect) => effect.name === name);\n      const effectToSwap = effectsToLose.find((effect) => effect.name === name);\n      const newKeepers = clone(effectsToKeep);\n      const newLosers = clone(effectsToLose);\n      newLosers.splice(index, 1);\n      newKeepers.push(effectToSwap);\n      setEffectsToKeep(newKeepers);\n      setEffectsToLose(newLosers);\n    }\n  };\n\n  const confirmReset = () => setEffectsAndResetRounds(effectsToKeep);\n\n  const effectsToKeepComponent = effectsToKeep.map((effect) => (\n    <EffectButtons\n      key={effect.name}\n      handleClick={handleClick}\n      turnNumber={turnNumber}\n      effect={effect}\n    />\n  ));\n  const effectsToLoseComponent = effectsToLose.map((effect) => (\n    <EffectButtons\n      key={effect.name}\n      handleClick={handleClick}\n      turnNumber={turnNumber}\n      effect={effect}\n    />\n  ));\n\n  return (\n    <>\n      <div className=\"keepEffectsContainer\">\n        <h4 className=\"keepEffectsHeader\">Current Effects</h4>\n        <div className=\"keepLoseHeaders\">\n          <p className=\"smallHeaders\">Keep</p>\n          <p className=\"smallHeaders\">Lose</p>\n        </div>\n        <div className=\"listOfEffectsContainer\">\n          <div className=\"effectsToKeepContainer insetContainer\">\n            {effectsToKeepComponent}\n          </div>\n          <div className=\"effectsToLoseContainer insetContainer\">\n            {effectsToLoseComponent}\n          </div>\n        </div>\n        <div className=\"confirmKeepersButtonContainer\">\n          <button\n            className=\"basicButton confirmKeepersButton\"\n            onClick={confirmReset}\n          >\n            Confirm Reset\n          </button>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst JumpTurn = ({ changeTurn }) => {\n  const [jumpNumber, setJumpNumber] = useState(1);\n  const [jumpSelection, setJumpSelection] = useState(\"forward\");\n  return (\n    <>\n      <div className=\"jumpTurnContentContainer\">\n        <div className=\"jumpOptionsButtonContainer\">\n          <button\n            className={\n              jumpSelection === \"forward\"\n                ? \"jumpOptionsButton basicButton pressed\"\n                : \"jumpOptionsButton basicButton\"\n            }\n            value=\"forward\"\n            onClick={(e) => setJumpSelection(e.target.value)}\n          >\n            Number of rounds forward\n          </button>\n          <button\n            className={\n              jumpSelection === \"backward\"\n                ? \"jumpOptionsButton basicButton pressed\"\n                : \"jumpOptionsButton basicButton\"\n            }\n            value=\"backward\"\n            onClick={(e) => setJumpSelection(e.target.value)}\n          >\n            Number of rounds backward\n          </button>\n          <button\n            className={\n              jumpSelection === \"goTo\"\n                ? \"jumpOptionsButton basicButton pressed\"\n                : \"jumpOptionsButton basicButton\"\n            }\n            value=\"goTo\"\n            onClick={(e) => setJumpSelection(e.target.value)}\n          >\n            To specified round\n          </button>\n        </div>\n        <div className=\"jumpNumberInputAndGoButtonContainer\">\n          <div className=\"numberInputContainer\">\n            <input\n              type=\"number\"\n              className=\"durationNumberInput textInput jumpNumberInput\"\n              value={jumpNumber}\n              onChange={(e) => setJumpNumber(Number(e.target.value))}\n            />\n          </div>\n          <button\n            className=\"goButton basicButton\"\n            onClick={() => changeTurn(jumpNumber, jumpSelection)}\n          >\n            Go\n          </button>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst Modal = ({\n  setModal,\n  modal,\n  changeTurn,\n  turnNumber,\n  effects,\n  setEffects,\n  tracker,\n}) => {\n  const closeModal = () => setModal(\"off\");\n  const setEffectsAndResetRounds = (newArray) => {\n    const newEffectsArray = clone(effects);\n    newEffectsArray[tracker].effects = newArray;\n    newEffectsArray[tracker].turn = 1;\n    setEffects(newEffectsArray);\n    setModal(\"off\");\n  };\n  const displayContent = (modal) => {\n    switch (modal) {\n      case \"jumpTurn\":\n        return <JumpTurn changeTurn={changeTurn} />;\n      case \"reset\":\n        return (\n          <Reset\n            effects={effects[tracker].effects}\n            setEffectsAndResetRounds={setEffectsAndResetRounds}\n            turnNumber={turnNumber}\n          />\n        );\n      default:\n        return \"\";\n    }\n  };\n\n  return (\n    <>\n      <div className=\"modalBody topContainer\">\n        <div className=\"modalContent\">{displayContent(modal)}</div>\n        <div className=\"closeModalButtonContainer\">\n          <button className=\"basicButton closeModalButton\" onClick={closeModal}>\n            {modal === \"jumpTurn\" ? \"Close\" : \"Cancel\"}\n          </button>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Modal;\n","import { useState } from \"react\";\nimport { clone } from \"../../utilities\";\nimport \"./ManageTrackers.css\";\n\nconst ManageTrackers = ({\n  effects,\n\n  setEffects,\n  tracker,\n  setTracker,\n}) => {\n  const renderEffectListButton = () => {\n    return Object.keys(effects).map((listName) => (\n      <button\n        key={listName}\n        value={listName}\n        onClick={(e) => setTracker(e.target.value)}\n        className={\n          tracker === listName\n            ? \"basicButton trackerNameButton pressed\"\n            : \"basicButton trackerNameButton\"\n        }\n      >\n        {listName}\n      </button>\n    ));\n  };\n  const addEditTracker = (e) => {\n    let newTrackerName = prompt(\"Please enter a name for this tracker\", \"\");\n    if (\n      (newTrackerName === null && tracker === \"\") ||\n      (newTrackerName === \"\" && tracker === \"\")\n    ) {\n      newTrackerName = Object.keys(effects).length;\n    } else if (\n      (newTrackerName === null && tracker !== \"\") ||\n      (newTrackerName === \"\" && tracker !== \"\")\n    ) {\n      return tracker;\n    }\n    if (effects.hasOwnProperty(newTrackerName)) {\n      return alert(\"Duplicate tracker name found, please try again\");\n    }\n    let newEffectsObject = clone(effects);\n    switch (true) {\n      case e.target.value === \"newTracker\":\n        newEffectsObject[newTrackerName] = { turn: 1, effects: [] };\n        setEffects(newEffectsObject);\n        break;\n      case e.target.value === \"renameTracker\":\n        newEffectsObject[newTrackerName] = clone(newEffectsObject[tracker]);\n        setTracker(newTrackerName);\n        delete newEffectsObject[tracker];\n        setEffects(newEffectsObject);\n        break;\n      default:\n        alert(\"Something went wrong\");\n    }\n  };\n  const deleteTracker = () => {\n    if (Object.keys(effects)[1] === undefined) {\n      return alert(\"Cannot have zero trackers. Use [Reset] instead.\");\n    }\n    const newEffectsArray = clone(effects);\n    delete newEffectsArray[tracker];\n    setTracker(Object.keys(effects)[0]);\n    setEffects(newEffectsArray);\n  };\n\n  return (\n    <>\n      <div className=\"trackerNameButtonsContainer\">\n        {renderEffectListButton()}\n        <div className=\"break\"></div>\n        <div className=\"editAndNewTrackerButtonsContainer\">\n          <button\n            className=\"basicButton\"\n            value=\"renameTracker\"\n            onClick={(e) => addEditTracker(e)}\n          >\n            Rename\n          </button>\n          <button\n            className=\"basicButton deleteTrackerButton\"\n            value=\"deleteTracker\"\n            onClick={deleteTracker}\n          >\n            Delete\n          </button>\n          <button\n            className=\"basicButton\"\n            value=\"newTracker\"\n            onClick={(e) => addEditTracker(e)}\n          >\n            New\n          </button>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ManageTrackers;\n","import { useState, useEffect } from \"react\";\n\nimport \"./App.css\";\n\nimport TurnManipulator from \"../TurnManipulator/TurnManipulator\";\nimport Effects from \"../Effects/Effects\";\nimport CreateNewEffect from \"../CreateNewEffect/CreateNewEffect\";\nimport Modal from \"../Modal/Modal\";\nimport ManageTrackers from \"../ManageTrackers/ManageTrackers\";\n\nimport { clone } from \"../../utilities.js\";\n\nfunction App() {\n  const [effects, setEffects] = useState(\n    JSON.parse(localStorage.getItem(\"effects\")) || {\n      \"1\": { turn: 1, effects: [] },\n    }\n  );\n  const [tracker, setTracker] = useState(Object.keys(effects)[0]);\n  const [toggleNewEffect, setToggleNewEffect] = useState(false);\n  const [toggleManageTrackers, setToggleManageTrackers] = useState(false);\n  const [modal, setModal] = useState(\"off\");\n  const turnNumber = effects[tracker].turn;\n\n  useEffect(() => {\n    localStorage.setItem(\"effects\", JSON.stringify(effects));\n  }, [effects]);\n\n  const reset = () => {\n    if (modal === \"reset\") {\n      setModal(\"off\");\n    } else if (effects[tracker].effects.length > 0) {\n      setModal(\"reset\");\n    } else {\n      const newEffectsArray = clone(effects);\n      newEffectsArray[tracker].turn = 1;\n      setEffects(newEffectsArray);\n    }\n  };\n  const changeTurn = (number, direction) => {\n    const newEffectsArray = clone(effects);\n    switch (direction) {\n      case \"forward\":\n        newEffectsArray[tracker].turn += number;\n        break;\n      case \"backward\":\n        newEffectsArray[tracker].turn -= number;\n        break;\n      case \"goTo\":\n        newEffectsArray[tracker].turn = number;\n        break;\n      default:\n        return number;\n    }\n    setEffects(newEffectsArray);\n  };\n  const addEffect = (effect) => {\n    const newEffectsArray = clone(effects);\n    newEffectsArray[tracker].effects.push(effect);\n    setEffects(newEffectsArray);\n  };\n  const removeEffect = (effect) => {\n    const newEffectsArray = clone(effects);\n    const index = newEffectsArray[tracker].effects.findIndex(\n      (e) => e.name === effect.name\n    );\n    newEffectsArray[tracker].effects.splice(index, 1);\n    setEffects(newEffectsArray);\n  };\n  const resetEffectDuration = (effect) => {\n    const newEffectsArray = clone(effects);\n    const index = newEffectsArray[tracker].effects.findIndex(\n      (e) => e.name === effect.name\n    );\n    newEffectsArray[tracker].effects[index].turnUsed = turnNumber;\n    setEffects(newEffectsArray);\n  };\n  return (\n    <div className=\"app\">\n      <div className=\"shadow\">\n        <div className=\"topContainer\">\n          <h1 className=\"title\">Effect Tracker</h1>\n          <div className=\"manageTrackersButtonContainer\">\n            <button\n              className={\n                toggleManageTrackers\n                  ? \"basicButton manageTrackersButton pressed\"\n                  : \"basicButton manageTrackersButton\"\n              }\n              onClick={() => setToggleManageTrackers(!toggleManageTrackers)}\n            >\n              Manage Trackers\n            </button>\n          </div>\n          {toggleManageTrackers ? (\n            <div className=\"manangeTrackersContainer insetContainer\">\n              <ManageTrackers\n                effects={effects}\n                setEffects={setEffects}\n                tracker={tracker}\n                setTracker={setTracker}\n              />\n            </div>\n          ) : null}\n          <h2 className=\"turnCount\">\n            {tracker}: Turn {turnNumber}\n          </h2>\n          <TurnManipulator\n            turnNumber={turnNumber}\n            reset={reset}\n            setModal={setModal}\n            modal={modal}\n            changeTurn={changeTurn}\n          />\n          <br />\n          <div className=\"newEffectButtonContainer\">\n            <button\n              className={\n                toggleNewEffect\n                  ? \"newEffectButton basicButton pressed\"\n                  : \"newEffectButton basicButton\"\n              }\n              onClick={() => setToggleNewEffect(!toggleNewEffect)}\n            >\n              New Effect\n            </button>\n          </div>\n          {toggleNewEffect ? (\n            <CreateNewEffect\n              addEffect={addEffect}\n              turnNumber={turnNumber}\n              setToggle={setToggleNewEffect}\n            />\n          ) : null}\n          {modal !== \"off\" ? (\n            <Modal\n              setModal={setModal}\n              modal={modal}\n              tracker={tracker}\n              turnNumber={turnNumber}\n              changeTurn={changeTurn}\n              effects={effects}\n              setEffects={setEffects}\n            />\n          ) : null}\n        </div>\n        <div className=\"effectsListContainer\">\n          <Effects\n            turnNumber={turnNumber}\n            effects={effects}\n            setEffects={setEffects}\n            removeEffect={removeEffect}\n            resetEffectDuration={resetEffectDuration}\n            tracker={tracker}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Components/App/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}