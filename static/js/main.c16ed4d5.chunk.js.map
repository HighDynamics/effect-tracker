{"version":3,"sources":["Components/TurnManipulator/TurnManipulator.js","utilities.js","Components/Effects/Effects.js","Components/CreateNewEffect/CreateNewEffect.js","Components/Modal/Modal.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["TurnManipulator","setTurnNumber","turnNumber","reset","setModal","modal","className","onClick","clone","object","JSON","parse","stringify","getClassName","durationRemaining","Infinity","getRemainingRounds","effect","remainingRounds","turnUsed","duration","durationType","EffectItem","rounds","removeEffect","resetEffectDuration","useState","toggle","setToggle","name","target","details","conditions","minutesAndSeconds","Math","floor","hoursAndMinutes","getRoundsToHoursAndMinutes","daysAndHours","getRoundsToDaysAndHours","remainingTime","formatRoundsRemaing","additionalClass","Effects","effects","setEffects","newEffectsArray","index","findIndex","e","splice","effectItem","map","CreateNewEffect","addEffect","setName","setTarget","setDetails","setDuration","setDurationType","setConditions","onSubmit","preventDefault","type","placeholder","value","onChange","required","Number","rows","cols","EffectButtons","handleClick","KeepEffects","setEffectsAndResetRounds","filter","effectsToKeep","setEffectsToKeep","effectsToLose","setEffectsToLose","some","effectToSwap","find","newKeepers","newLosers","push","effectsToKeepComponent","effectsToLoseComponent","JumpTurn","jumpNumber","setJumpNumber","radioSelection","setRadioSelection","go","alert","checked","Modal","newArray","displayContent","App","localStorage","getItem","useEffect","setItem","length","clonedEffectsArray","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c16ed4d5.chunk.js","sourcesContent":["import \"./TurnManipulator.css\";\n\nconst TurnManipulator = ({\n  setTurnNumber,\n  turnNumber,\n  reset,\n  setModal,\n  modal,\n}) => {\n  const previousTurnArrows = \"<<\";\n  const nextTurnArrows = \">>\";\n  const nextTurn = () => setTurnNumber(turnNumber + 1);\n  const previousTurn = () => setTurnNumber(turnNumber - 1);\n  const toggleModal = () => {\n    if (modal === \"jumpTurn\") {\n      setModal(\"off\");\n    } else {\n      setModal(\"jumpTurn\");\n    }\n  };\n  return (\n    <>\n      <div className=\"turnManipulatorButtonsContainer\">\n        <button className=\"basicButton\" onClick={previousTurn}>\n          {previousTurnArrows}\n        </button>\n        <button className=\"basicButton\" onClick={toggleModal}>\n          Jump\n        </button>\n        <button className=\"basicButton\" onClick={nextTurn}>\n          {nextTurnArrows}\n        </button>\n      </div>\n      <div className=\"resetButtonContainer\">\n        <button className=\"resetButton basicButton\" onClick={reset}>\n          Reset\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default TurnManipulator;\n","function clone<T>(object: T): T {\n  return JSON.parse(JSON.stringify(object));\n}\n\nfunction getClassName(durationRemaining) {\n  switch (true) {\n    case durationRemaining === Infinity:\n      return \"permanent\";\n    case durationRemaining > 0:\n      return \"active\";\n    case durationRemaining <= 0:\n      return \"expired\";\n    default:\n      return \"\";\n  }\n}\n\nfunction getRoundsToMinutesAndSeconds(rounds) {\n  const minutes = Math.floor(rounds / 10);\n  const seconds = Math.floor((rounds % 10) * 6);\n  return [minutes, seconds];\n}\nfunction getRoundsToHoursAndMinutes(rounds) {\n  const hours = Math.floor(rounds / 600);\n  const minutes = Math.floor((rounds % 600) / 10);\n  return [hours, minutes];\n}\nfunction getRoundsToDaysAndHours(rounds) {\n  const days = Math.floor(rounds / 14400);\n  const hours = Math.floor((rounds % 14400) / 600);\n  return [days, hours];\n}\n\nfunction getRemainingRounds(effect, turnNumber) {\n  let remainingRounds = effect.turnUsed + effect.duration - turnNumber;\n  switch (effect.durationType) {\n    case \"rounds\":\n      break;\n    case \"minutes\":\n      remainingRounds = effect.turnUsed + effect.duration * 10 - turnNumber;\n      break;\n    case \"hours\":\n      remainingRounds = effect.turnUsed + effect.duration * 600 - turnNumber;\n      break;\n    case \"days\":\n      remainingRounds = effect.turnUsed + effect.duration * 14400 - turnNumber;\n      break;\n    case \"permanent\":\n      return Infinity;\n    default:\n      break;\n  }\n  return remainingRounds;\n}\n\nexport {\n  clone,\n  getClassName,\n  getRoundsToMinutesAndSeconds,\n  getRoundsToHoursAndMinutes,\n  getRoundsToDaysAndHours,\n  getRemainingRounds,\n};\n","import { useState } from \"react\";\n\nimport \"./Effects.css\";\n\nimport {\n  clone,\n  getClassName,\n  getRoundsToMinutesAndSeconds,\n  getRoundsToHoursAndMinutes,\n  getRoundsToDaysAndHours,\n  getRemainingRounds,\n} from \"../../utilities\";\n\nconst EffectItem = ({\n  effect,\n  turnNumber,\n  removeEffect,\n  resetEffectDuration,\n}) => {\n  const [toggle, setToggle] = useState(false);\n  const name = effect.name;\n  const target = effect.target;\n  const details = effect.details;\n  const conditions = effect.conditions;\n  const infinitySymbol = \"\\u221e\";\n\n  const remainingRounds = getRemainingRounds(effect, turnNumber);\n\n  const minutesAndSeconds = getRoundsToMinutesAndSeconds(remainingRounds);\n  const hoursAndMinutes = getRoundsToHoursAndMinutes(remainingRounds);\n  const daysAndHours = getRoundsToDaysAndHours(remainingRounds);\n\n  function formatRoundsRemaing(remainingRounds) {\n    if (remainingRounds === Infinity) {\n      return infinitySymbol;\n    } else if (remainingRounds < 20) {\n      return remainingRounds + \" rounds\";\n    } else if (remainingRounds >= 20 && remainingRounds < 600) {\n      return minutesAndSeconds[0] + \"m \" + minutesAndSeconds[1] + \"s\";\n    } else if (remainingRounds >= 600 && remainingRounds < 14400) {\n      return hoursAndMinutes[0] + \"h \" + hoursAndMinutes[1] + \"m\";\n    } else if (remainingRounds >= 14400) {\n      return daysAndHours[0] + \"d \" + daysAndHours[1] + \"h\";\n    }\n  }\n\n  const remainingTime = formatRoundsRemaing(remainingRounds);\n\n  const additionalClass = getClassName(remainingRounds);\n\n  const resetDuration = () => resetEffectDuration(effect);\n\n  return (\n    <button\n      className={additionalClass + \" effectContainer\"}\n      onClick={() => setToggle(!toggle)}\n    >\n      <p className=\"effectItem\">\n        <span className=\"effectKeys\">Name:</span> {name}\n      </p>\n      <p className=\"effectItem\">\n        <span className=\"effectKeys\">Remaining Time:</span> {remainingTime}\n      </p>\n      {toggle ? (\n        <>\n          {target !== \"\" ? (\n            <p className=\"effectItem\">\n              <span className=\"effectKeys\">Target:</span> {target}\n            </p>\n          ) : null}\n          {details !== \"\" ? (\n            <p className=\"effectItem\">\n              <span className=\"effectKeys\">Details:</span> {details}\n            </p>\n          ) : null}\n          {conditions !== \"\" ? (\n            <p className=\"effectItem\">\n              <span className=\"effectKeys\">Conditions:</span> {conditions}\n            </p>\n          ) : null}\n          <div className=\"break\"></div>\n          <div className=\"endResetEffectButtonContainer\">\n            <button\n              className=\"basicButton endResetEffectButton\"\n              onClick={resetDuration}\n            >\n              Reset Duration\n            </button>\n            <button\n              className=\"basicButton endResetEffectButton\"\n              onClick={() => removeEffect(effect)}\n            >\n              End Effect\n            </button>\n          </div>\n        </>\n      ) : null}\n    </button>\n  );\n};\n\nconst Effects = ({ turnNumber, effects, setEffects }) => {\n  const removeEffect = (effect) => {\n    const newEffectsArray = clone(effects);\n    const index = newEffectsArray.findIndex((e) => e.name === effect.name);\n    newEffectsArray.splice(index, 1);\n    setEffects(newEffectsArray);\n  };\n  const resetEffectDuration = (effect) => {\n    const newEffectsArray = clone(effects);\n    const index = newEffectsArray.findIndex((e) => e.name === effect.name);\n    newEffectsArray[index].turnUsed = turnNumber;\n    setEffects(newEffectsArray);\n  };\n  const effectItem = effects.map((effect) => (\n    <EffectItem\n      effect={effect}\n      removeEffect={removeEffect}\n      turnNumber={turnNumber}\n      key={effect.name}\n      resetEffectDuration={resetEffectDuration}\n    />\n  ));\n  return <>{effectItem}</>;\n};\n\nexport default Effects;\n","import { useState } from \"react\";\n\nimport \"./CreateNewEffect.css\";\n\nconst CreateNewEffect = ({ addEffect, turnNumber, setToggle }) => {\n  const [name, setName] = useState(\"\");\n  const [target, setTarget] = useState(\"\");\n  const [details, setDetails] = useState(\"\");\n  const [duration, setDuration] = useState(1);\n  const [durationType, setDurationType] = useState(\"\");\n  const [conditions, setConditions] = useState(\"\");\n  let effect = {\n    name: name,\n    target: target,\n    details: details,\n    duration: duration,\n    durationType: durationType,\n    conditions: conditions,\n    turnUsed: turnNumber,\n  };\n  const handlePermanentDuration = () => {\n    if (effect.durationType === \"permanent\") {\n      effect.duration = Infinity;\n    }\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    handlePermanentDuration();\n    addEffect(effect);\n    setName(\"\");\n    setTarget(\"\");\n    setDetails(\"\");\n    setDuration(1);\n    setDurationType(\"rounds\");\n    setConditions(\"\");\n    setToggle(false);\n  };\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <div className=\"formContainer\">\n          <fieldset className=\"formItem\">\n            <legend className=\"formItemTitle\">Name</legend>\n            <input\n              type=\"text\"\n              placeholder=\"name of effect\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              required\n            />\n            <p className=\"requiredText\">* required</p>\n          </fieldset>\n          <fieldset className=\"formItem\">\n            <legend className=\"formItemTitle\">Duration</legend>\n            <div className=\"durationInputContainer\">\n              <input\n                className=\"durationNumberInput\"\n                type=\"number\"\n                placeholder=\"4\"\n                value={duration}\n                onChange={(e) => setDuration(Number(e.target.value))}\n                required\n              />\n              <select\n                className=\"durationTypeSelector\"\n                value={durationType === \"\" ? \"rounds\" : durationType}\n                onChange={(e) => setDurationType(e.target.value)}\n              >\n                <option value=\"rounds\">round(s)</option>\n                <option value=\"minutes\">minute(s)</option>\n                <option value=\"hours\">hour(s)</option>\n                <option value=\"days\">day(s)</option>\n                <option value=\"permanent\">permanent</option>\n              </select>\n            </div>{\" \"}\n            <p className=\"requiredText\">* required</p>\n          </fieldset>\n          <fieldset className=\"formItem\">\n            <legend className=\"formItemTitle\">Target or Area</legend>\n            <input\n              type=\"text\"\n              placeholder=\"who or what is affected\"\n              value={target}\n              onChange={(e) => setTarget(e.target.value)}\n            />\n          </fieldset>\n          <fieldset className=\"formItem\">\n            <legend className=\"formItemTitle\">Details</legend>\n            <textarea\n              rows=\"4\"\n              cols=\"30\"\n              placeholder='breif description what effect does. ex.: \"+4 armor bonus\"'\n              value={details}\n              onChange={(e) => setDetails(e.target.value)}\n            />\n          </fieldset>\n          <fieldset className=\"formItem\">\n            <legend className=\"formItemTitle\">Conditions</legend>\n            <textarea\n              rows=\"4\"\n              cols=\"30\"\n              placeholder=\"ex.: must be within 60' of Sabri\"\n              value={conditions}\n              onChange={(e) => setConditions(e.target.value)}\n            />\n          </fieldset>\n          <div className=\"break\"></div>\n          <div className=\"addEffectButtonContainer\">\n            <input\n              className=\"basicButton addEffectButton\"\n              type=\"submit\"\n              value=\"add effect\"\n            />\n          </div>\n        </div>\n      </form>\n    </>\n  );\n};\n\nexport default CreateNewEffect;\n","import { useState } from \"react\";\n\nimport { clone, getRemainingRounds, getClassName } from \"../../utilities\";\n\nimport \"./Modal.css\";\n\nconst EffectButtons = ({ effect, handleClick, turnNumber }) => {\n  const remainingRounds = getRemainingRounds(effect, turnNumber);\n  const additionalClass = getClassName(remainingRounds);\n\n  return (\n    <div className=\"effectButtonContainer\">\n      <button\n        key={effect.name}\n        value={effect.name}\n        className={additionalClass + \" effectButton basicButton\"}\n        onClick={(e) => handleClick(e)}\n      >\n        {effect.name}\n      </button>\n    </div>\n  );\n};\n\nconst KeepEffects = ({ effects, setEffectsAndResetRounds, turnNumber }) => {\n  const [effectsToKeep, setEffectsToKeep] = useState(\n    effects.filter((e) => e.durationType === \"permanent\")\n  );\n  const [effectsToLose, setEffectsToLose] = useState(\n    effects.filter((e) => e.durationType !== \"permanent\")\n  );\n  const handleClick = (e) => {\n    const name = e.target.value;\n    if (effectsToKeep.some((effect) => effect.name === name)) {\n      const index = effectsToKeep.findIndex((effect) => effect.name === name);\n      const effectToSwap = effectsToKeep.find((effect) => effect.name === name);\n      const newKeepers = clone(effectsToKeep);\n      const newLosers = clone(effectsToLose);\n      newKeepers.splice(index, 1);\n      newLosers.push(effectToSwap);\n      setEffectsToKeep(newKeepers);\n      setEffectsToLose(newLosers);\n    } else {\n      const index = effectsToLose.findIndex((effect) => effect.name === name);\n      const effectToSwap = effectsToLose.find((effect) => effect.name === name);\n      const newKeepers = clone(effectsToKeep);\n      const newLosers = clone(effectsToLose);\n      newLosers.splice(index, 1);\n      newKeepers.push(effectToSwap);\n      setEffectsToKeep(newKeepers);\n      setEffectsToLose(newLosers);\n    }\n  };\n\n  const setEffects = () => setEffectsAndResetRounds(effectsToKeep);\n\n  const effectsToKeepComponent = effectsToKeep.map((effect) => (\n    <EffectButtons\n      key={effect.name}\n      handleClick={handleClick}\n      turnNumber={turnNumber}\n      effect={effect}\n    />\n  ));\n  const effectsToLoseComponent = effectsToLose.map((effect) => (\n    <EffectButtons\n      key={effect.name}\n      handleClick={handleClick}\n      turnNumber={turnNumber}\n      effect={effect}\n    />\n  ));\n\n  return (\n    <>\n      <div className=\"keepEffectsContainer\">\n        <h4 className=\"keepEffectsHeader\">Current Effects</h4>\n        <div className=\"keepLoseHeaders\">\n          <p className=\"smallHeaders\">keep</p>\n          <p className=\"smallHeaders\">lose</p>\n        </div>\n        <div className=\"listOfEffectsContainer\">\n          <div className=\"effectsToKeepContainer\">{effectsToKeepComponent}</div>\n          <div className=\"effectsToLoseContainer\">{effectsToLoseComponent}</div>\n        </div>\n        <div className=\"confirmKeepersButtonContainer\">\n          <button\n            className=\"basicButton confirmKeepersButton\"\n            onClick={setEffects}\n          >\n            confirm\n          </button>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst JumpTurn = ({ setTurnNumber, turnNumber }) => {\n  const [jumpNumber, setJumpNumber] = useState(1);\n  const [radioSelection, setRadioSelection] = useState(\"forward\");\n  const jumpForward = () => setTurnNumber(turnNumber + jumpNumber);\n  const jumpBackward = () => setTurnNumber(turnNumber - jumpNumber);\n  const goTo = () => setTurnNumber(jumpNumber);\n  const go = (radioSelection) => {\n    switch (radioSelection) {\n      case \"forward\":\n        jumpForward();\n        break;\n      case \"backward\":\n        jumpBackward();\n        break;\n      case \"goTo\":\n        goTo();\n        break;\n      default:\n        alert(\"Something went wrong.\");\n    }\n  };\n  return (\n    <>\n      <div className=\"jumpTurnContentContainer\">\n        <div\n          className=\"radioButtonContainer\"\n          onChange={(e) => setRadioSelection(e.target.value)}\n        >\n          <label className=\"radioButtonLabel\">\n            <input\n              type=\"radio\"\n              value=\"forward\"\n              onChange={() => setRadioSelection(\"forward\")}\n              checked={radioSelection === \"forward\"}\n            />\n            Number of rounds forward\n          </label>\n        </div>\n        <div className=\"radioButtonContainer\">\n          <label className=\"radioButtonLabel\">\n            <input\n              type=\"radio\"\n              value=\"backward\"\n              onChange={() => setRadioSelection(\"backward\")}\n              checked={radioSelection === \"backward\"}\n            />\n            Number of rounds backward\n          </label>\n        </div>\n        <div className=\"radioButtonContainer\">\n          <label className=\"radioButtonLabel\">\n            <input\n              type=\"radio\"\n              value=\"goTo\"\n              onChange={() => setRadioSelection(\"goTo\")}\n              checked={radioSelection === \"goTo\"}\n            />\n            To specified round\n          </label>\n        </div>\n        <input\n          type=\"number\"\n          value={jumpNumber}\n          onChange={(e) => setJumpNumber(Number(e.target.value))}\n        />\n        <button\n          className=\"goButton basicButton\"\n          onClick={() => go(radioSelection)}\n        >\n          Go\n        </button>\n      </div>\n    </>\n  );\n};\n\nconst Modal = ({\n  setModal,\n  modal,\n  setTurnNumber,\n  turnNumber,\n  effects,\n  setEffects,\n}) => {\n  const closeModal = () => setModal(\"off\");\n  const setEffectsAndResetRounds = (newArray) => {\n    setEffects(newArray);\n    setTurnNumber(1);\n    setModal(\"off\");\n  };\n  const displayContent = (modal) => {\n    switch (modal) {\n      case \"jumpTurn\":\n        return (\n          <JumpTurn setTurnNumber={setTurnNumber} turnNumber={turnNumber} />\n        );\n      case \"keepEffects\":\n        return (\n          <KeepEffects\n            effects={effects}\n            setEffectsAndResetRounds={setEffectsAndResetRounds}\n            turnNumber={turnNumber}\n          />\n        );\n      default:\n        return \"\";\n    }\n  };\n\n  return (\n    <>\n      <div className=\"modalBody\">\n        <div className=\"modalContent\">{displayContent(modal)}</div>\n        <div className=\"closeModalButtonContainer\">\n          <button className=\"basicButton closeModalButton\" onClick={closeModal}>\n            cancel\n          </button>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Modal;\n","import { useState, useEffect } from \"react\";\n\nimport \"./App.css\";\n\nimport TurnManipulator from \"../TurnManipulator/TurnManipulator\";\nimport Effects from \"../Effects/Effects\";\nimport CreateNewEffect from \"../CreateNewEffect/CreateNewEffect\";\nimport Modal from \"../Modal/Modal\";\n\nimport { clone } from \"../../utilities.js\";\n\nfunction App() {\n  const [turnNumber, setTurnNumber] = useState(\n    Number(localStorage.getItem(\"turnNumber\")) || 1\n  );\n  const [effects, setEffects] = useState(\n    JSON.parse(localStorage.getItem(\"effects\")) || []\n  );\n  const [toggle, setToggle] = useState(false);\n  const [modal, setModal] = useState(\"off\");\n  useEffect(() => {\n    localStorage.setItem(\"effects\", JSON.stringify(effects));\n  }, [effects]);\n  useEffect(() => {\n    localStorage.setItem(\"turnNumber\", turnNumber);\n  }, [turnNumber]);\n  const reset = () => {\n    if (modal === \"keepEffects\") {\n      setModal(\"off\");\n    } else if (effects.length > 0) {\n      setModal(\"keepEffects\");\n    } else {\n      setTurnNumber(1);\n    }\n  };\n\n  const addEffect = (effect) => {\n    const clonedEffectsArray = clone(effects);\n    clonedEffectsArray.push(effect);\n    setEffects(clonedEffectsArray);\n  };\n  return (\n    <div className=\"app\">\n      <div className=\"topContainer\">\n        <h1 className=\"title\">Effect Tracker</h1>\n        <h2 className=\"turnCount\">Turn {turnNumber}</h2>\n        <TurnManipulator\n          setTurnNumber={setTurnNumber}\n          turnNumber={turnNumber}\n          reset={reset}\n          setModal={setModal}\n          modal={modal}\n        />\n        <br />\n        <div className=\"newEffectButtonContainer\">\n          <button\n            className=\"newEffectButton basicButton\"\n            onClick={() => setToggle(!toggle)}\n          >\n            New Effect\n          </button>\n        </div>\n        {toggle ? (\n          <CreateNewEffect\n            addEffect={addEffect}\n            turnNumber={turnNumber}\n            setToggle={setToggle}\n          />\n        ) : null}\n        {modal !== \"off\" ? (\n          <Modal\n            setModal={setModal}\n            modal={modal}\n            turnNumber={turnNumber}\n            setTurnNumber={setTurnNumber}\n            effects={effects}\n            setEffects={setEffects}\n          />\n        ) : null}\n      </div>\n      <Effects\n        turnNumber={turnNumber}\n        effects={effects}\n        setEffects={setEffects}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Components/App/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}