{"version":3,"sources":["Components/TurnManipulator/TurnManipulator.js","utilities.js","Components/Effects/Effects.js","Components/CreateNewEffect/CreateNewEffect.js","Components/Modal/Modal.js","Components/ManageTrackers/ManageTrackers.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["TurnManipulator","turnNumber","reset","setModal","modal","changeTurn","className","onClick","clone","object","JSON","parse","stringify","getClassName","durationRemaining","Infinity","getRemainingRounds","effect","remainingRounds","turnUsed","duration","durationType","EffectItem","rounds","removeEffect","resetEffectDuration","useState","toggle","setToggle","name","target","details","conditions","minutesAndSeconds","Math","floor","hoursAndMinutes","getRoundsToHoursAndMinutes","daysAndHours","getRoundsToDaysAndHours","remainingTime","formatRoundsRemaing","additionalClass","role","Effects","effects","setEffects","effectItem","sort","a","b","map","CreateNewEffect","addEffect","expanded","setExpanded","setName","setTarget","setDetails","setDuration","setDurationType","setConditions","handleSetDurationType","onSubmit","e","preventDefault","type","placeholder","value","onChange","required","Number","rows","cols","EffectButtons","handleClick","Reset","setEffectsAndResetRounds","filter","effectsToKeep","setEffectsToKeep","effectsToLose","setEffectsToLose","some","index","findIndex","effectToSwap","find","newKeepers","newLosers","splice","push","console","log","effectsToKeepComponent","effectsToLoseComponent","JumpTurn","jumpNumber","setJumpNumber","jumpSelection","setJumpSelection","Modal","tracker","newArray","newEffectsArray","turn","displayContent","ManageTrackers","setTracker","addEditTracker","newTrackerName","prompt","Object","keys","length","hasOwnProperty","alert","newEffectsObject","listName","undefined","App","localStorage","getItem","toggleNewEffect","setToggleNewEffect","toggleManageTrackers","setToggleManageTrackers","useEffect","setItem","number","direction","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0UA8DeA,EA5DS,SAAC,GAMnB,EALJC,WAKK,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,MACAC,EACI,EADJA,WAaA,OACE,qCACE,sBAAKC,UAAU,kCAAf,UACE,wBACEA,UAAU,oCACVC,QAba,kBAAMF,EAAW,EAAG,aAWnC,SAdqB,OAoBrB,wBACEC,UACY,aAAVF,EACI,4CACA,oCAENG,QAtBY,WAEhBJ,EADY,aAAVC,EACO,MAEA,aAYP,kBAUA,wBACEE,UAAU,oCACVC,QA9BS,kBAAMF,EAAW,EAAG,YA4B/B,SA7BiB,UAoCnB,qBAAKC,UAAU,uBAAf,SACE,wBACEA,UACY,UAAVF,EACI,kCACA,0BAENG,QAASL,EANX,yB,MC/CR,SAASM,EAASC,GAChB,OAAOC,KAAKC,MAAMD,KAAKE,UAAUH,IAGnC,SAASI,EAAaC,GACpB,QAAQ,GACN,KAAKA,IAAsBC,IACzB,MAAO,YACT,KAAKD,EAAoB,EACvB,MAAO,SACT,KAAKA,GAAqB,EACxB,MAAO,UACT,QACE,MAAO,IAoBb,SAASE,EAAmBC,EAAQhB,GAClC,IAAIiB,EAAkBD,EAAOE,SAAWF,EAAOG,SAAWnB,EAC1D,OAAQgB,EAAOI,cACb,IAAK,QACH,MACF,IAAK,SACHH,EAAkBD,EAAOE,SAA6B,GAAlBF,EAAOG,SAAgBnB,EAC3D,MACF,IAAK,OACHiB,EAAkBD,EAAOE,SAA6B,IAAlBF,EAAOG,SAAiBnB,EAC5D,MACF,IAAK,MACHiB,EAAkBD,EAAOE,SAA6B,MAAlBF,EAAOG,SAAmBnB,EAC9D,MACF,IAAK,YACH,OAAOc,IAIX,OAAOG,ECxCT,IAAMI,EAAa,SAAC,GAKb,IDA+BC,ECJpCN,EAII,EAJJA,OACAhB,EAGI,EAHJA,WACAuB,EAEI,EAFJA,aACAC,EACI,EADJA,oBACI,EACwBC,oBAAS,GADjC,mBACGC,EADH,KACWC,EADX,KAEEC,EAAOZ,EAAOY,KACdC,EAASb,EAAOa,OAChBC,EAAUd,EAAOc,QACjBC,EAAaf,EAAOe,WAGpBd,EAAkBF,EAAmBC,EAAQhB,GAE7CgC,GDV8BV,ECUmBL,EDPhD,CAFSgB,KAAKC,MAAMZ,EAAS,IACpBW,KAAKC,MAAOZ,EAAS,GAAM,KCSrCa,EDNR,SAAoCb,GAGlC,MAAO,CAFOW,KAAKC,MAAMZ,EAAS,KAClBW,KAAKC,MAAOZ,EAAS,IAAO,KCIpBc,CAA2BnB,GAC7CoB,EDFR,SAAiCf,GAG/B,MAAO,CAFMW,KAAKC,MAAMZ,EAAS,OACnBW,KAAKC,MAAOZ,EAAS,MAAS,MCAvBgB,CAAwBrB,GAgB7C,IAAMsB,EAdN,SAA6BtB,GAC3B,OAAIA,IAAoBH,IATH,SAWVG,EAAkB,GACpBA,EAAkB,UAChBA,GAAmB,IAAMA,EAAkB,IAC7Ce,EAAkB,GAAK,KAAOA,EAAkB,GAAK,IACnDf,GAAmB,KAAOA,EAAkB,MAC9CkB,EAAgB,GAAK,KAAOA,EAAgB,GAAK,IAC/ClB,GAAmB,MACrBoB,EAAa,GAAK,KAAOA,EAAa,GAAK,SAD7C,EAKaG,CAAoBvB,GAEpCwB,EAAkB7B,EAAaK,GAIrC,OACE,sBACEyB,KAAK,SACLrC,UACEqB,EACIe,EAAkB,kCAClBA,EAAkB,mBAExBnC,QAAS,kBAAMqB,GAAWD,IAP5B,UASE,oBAAGrB,UAAU,aAAb,UACE,sBAAMA,UAAU,aAAhB,kBADF,MAC8CuB,KAE9C,oBAAGvB,UAAU,aAAb,UACE,sBAAMA,UAAU,aAAhB,uBADF,MACmDkC,KAElDb,EACC,qCACE,qBAAKrB,UAAU,UACH,KAAXwB,EACC,oBAAGxB,UAAU,aAAb,UACE,sBAAMA,UAAU,aAAhB,oBADF,MACgDwB,KAE9C,KACS,KAAZC,EACC,oBAAGzB,UAAU,aAAb,UACE,sBAAMA,UAAU,aAAhB,qBADF,MACiDyB,KAE/C,KACY,KAAfC,EACC,oBAAG1B,UAAU,aAAb,UACE,sBAAMA,UAAU,aAAhB,wBADF,MACoD0B,KAElD,KACJ,qBAAK1B,UAAU,UACf,sBAAKA,UAAU,gCAAf,UACE,wBACEA,UAAU,gCACVC,QAxCU,kBAAMkB,EAAoBR,IAsCtC,4BAMA,wBACEX,UAAU,8BACVC,QAAS,kBAAMiB,EAAaP,IAF9B,8BAQF,SA8BK2B,EAzBC,SAAC,GAMV,IALL3C,EAKI,EALJA,WACA4C,EAII,EAJJA,QAEArB,GAEI,EAHJsB,WAGI,EAFJtB,cACAC,EACI,EADJA,oBAQMsB,EANgBF,EAAQG,MAAK,SAACC,EAAGC,GAGrC,OAFyBlC,EAAmBiC,EAAGhD,GACtBe,EAAmBkC,EAAGjD,GACF,GAAK,KAGnBkD,KAAI,SAAClC,GAAD,OACnC,cAAC,EAAD,CACEA,OAAQA,EACRO,aAAcA,EACdvB,WAAYA,EAEZwB,oBAAqBA,GADhBR,EAAOY,SAIhB,OAAO,mCAAGkB,KC4DGK,G,MAxLS,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,UAAWpD,EAA4B,EAA5BA,WAAY2B,EAAgB,EAAhBA,UAAgB,EAChCF,oBAAS,GADuB,mBACzD4B,EADyD,KAC/CC,EAD+C,OAExC7B,mBAAS,IAF+B,mBAEzDG,EAFyD,KAEnD2B,EAFmD,OAGpC9B,mBAAS,IAH2B,mBAGzDI,EAHyD,KAGjD2B,EAHiD,OAIlC/B,mBAAS,IAJyB,mBAIzDK,EAJyD,KAIhD2B,EAJgD,OAKhChC,mBAAS,GALuB,mBAKzDN,EALyD,KAK/CuC,EAL+C,OAMxBjC,mBAAS,SANe,mBAMzDL,EANyD,KAM3CuC,EAN2C,OAO5BlC,mBAAS,IAPmB,mBAOzDM,EAPyD,KAO7C6B,EAP6C,KAQ5D5C,EAAS,CACXY,KAAMA,EACNC,OAAQA,EACRC,QAASA,EACTX,SAAUA,EACVC,aAAcA,EACdW,WAAYA,EACZb,SAAUlB,GAKN6D,EAAwB,SAACzC,GAC7BuC,EAAgBvC,GAChBkC,GAAY,IAmBd,OACE,mCACE,sBAAMQ,SAdW,SAACC,GACpBA,EAAEC,iBAL0B,cAAxBhD,EAAOI,eACTJ,EAAOG,SAAWL,KAMpBsC,EAAUpC,GACVuC,EAAQ,IACRC,EAAU,IACVC,EAAW,IACXC,EAAY,GACZC,EAAgB,SAChBC,EAAc,IACdjC,GAAU,IAIR,SACE,sBAAKtB,UAAU,gBAAf,UACE,2BAAUA,UAAU,0BAApB,UACE,wBAAQA,UAAU,gBAAlB,kBACA,qBAAKA,UAAU,qBAAf,SACE,uBACE4D,KAAK,OACLC,YAAY,iBACZ7D,UAAU,YACV8D,MAAOvC,EACPwC,SAAU,SAACL,GAAD,OAAOR,EAAQQ,EAAElC,OAAOsC,QAClCE,UAAQ,MAGZ,mBAAGhE,UAAU,eAAb,2BAEF,2BAAUA,UAAU,0BAApB,UACE,wBAAQA,UAAU,gBAAlB,sBACA,sBAAKA,UAAU,yBAAf,UACE,qBAAKA,UAAU,uBAAf,SACE,uBACEA,UAAU,gCACV4D,KAAK,SACLE,MAAOhD,EACPiD,SAAU,SAACL,GAAD,OAAOL,EAAYY,OAAOP,EAAElC,OAAOsC,SAC7CE,UAAQ,MAIXhB,EAAW,KACV,qBACEX,KAAK,SACLrC,UACmB,cAAjBe,EACI,6CACA,mCAEN+C,MAAwB,KAAjB/C,EAAsB,QAAUA,EACvCd,QAhEM,WACpBgD,GAAaD,IAuDD,SAUoB,cAAjBjC,EACGA,EACAA,EAAe,QAGtBiC,EACC,sBAAKhD,UAAU,uCAAf,UACE,qBACEqC,KAAK,SACLrC,UAAU,0CACV8D,MAAM,QACN7D,QAAS,kBAAMuD,EAAsB,UAJvC,sBAQA,qBACEnB,KAAK,SACLrC,UAAU,0CACV8D,MAAM,SACN7D,QAAS,kBAAMuD,EAAsB,WAJvC,uBAQA,qBACEnB,KAAK,SACLrC,UAAU,0CACV8D,MAAM,OACN7D,QAAS,kBAAMuD,EAAsB,SAJvC,qBAQA,qBACEnB,KAAK,SACLrC,UAAU,0CACV8D,MAAM,MACN7D,QAAS,kBAAMuD,EAAsB,QAJvC,oBAQA,qBACEnB,KAAK,SACLrC,UAAU,oDACV8D,MAAM,YACN7D,QAAS,kBAAMuD,EAAsB,cAJvC,0BASA,QACC,IACP,mBAAGxD,UAAU,eAAb,2BAEF,2BAAUA,UAAU,0BAApB,UACE,wBAAQA,UAAU,gBAAlB,4BACA,qBAAKA,UAAU,yBAAf,SACE,0BACEkE,KAAK,IACLC,KAAK,KACLnE,UAAU,gBACV6D,YAAY,0BACZC,MAAOtC,EACPuC,SAAU,SAACL,GAAD,OAAOP,EAAUO,EAAElC,OAAOsC,eAI1C,2BAAU9D,UAAU,0BAApB,UACE,wBAAQA,UAAU,gBAAlB,qBACA,qBAAKA,UAAU,yBAAf,SACE,0BACEkE,KAAK,IACLC,KAAK,KACLnE,UAAU,gBACV6D,YAAY,4DACZC,MAAOrC,EACPsC,SAAU,SAACL,GAAD,OAAON,EAAWM,EAAElC,OAAOsC,eAI3C,2BAAU9D,UAAU,0BAApB,UACE,wBAAQA,UAAU,gBAAlB,wBAAsD,IACtD,qBAAKA,UAAU,yBAAf,SACE,0BACEkE,KAAK,IACLC,KAAK,KACLnE,UAAU,gBACV6D,YAAY,mCACZC,MAAOpC,EACPqC,SAAU,SAACL,GAAD,OAAOH,EAAcG,EAAElC,OAAOsC,eAI9C,qBAAK9D,UAAU,UACf,qBAAKA,UAAU,2BAAf,SACE,uBAAOA,UAAU,8BAA8B4D,KAAK,sBC9K1DQ,G,MAAgB,SAAC,GAAyC,IAAvCzD,EAAsC,EAAtCA,OAAQ0D,EAA8B,EAA9BA,YAEzBjC,EAAkB7B,EADAG,EAAmBC,EADkB,EAAjBhB,aAI5C,OACE,qBAAKK,UAAU,wBAAf,SACE,wBAEE8D,MAAOnD,EAAOY,KACdvB,UAAWoC,EAAkB,4BAC7BnC,QAAS,SAACyD,GAAD,OAAOW,EAAYX,IAJ9B,SAMG/C,EAAOY,MALHZ,EAAOY,UAWd+C,EAAQ,SAAC,GAAuD,IAArD/B,EAAoD,EAApDA,QAASgC,EAA2C,EAA3CA,yBAA0B5E,EAAiB,EAAjBA,WAAiB,EACzByB,mBACxCmB,EAAQiC,QAAO,SAACd,GAAD,MAA0B,cAAnBA,EAAE3C,iBAFyC,mBAC5D0D,EAD4D,KAC7CC,EAD6C,OAIzBtD,mBACxCmB,EAAQiC,QAAO,SAACd,GAAD,MAA0B,cAAnBA,EAAE3C,iBALyC,mBAI5D4D,EAJ4D,KAI7CC,EAJ6C,KAO7DP,EAAc,SAACX,GACnB,IAAMnC,EAAOmC,EAAElC,OAAOsC,MACtB,GAAIW,EAAcI,MAAK,SAAClE,GAAD,OAAYA,EAAOY,OAASA,KAAO,CACxD,IAAMuD,EAAQL,EAAcM,WAAU,SAACpE,GAAD,OAAYA,EAAOY,OAASA,KAC5DyD,EAAeP,EAAcQ,MAAK,SAACtE,GAAD,OAAYA,EAAOY,OAASA,KAC9D2D,EAAahF,EAAMuE,GACnBU,EAAYjF,EAAMyE,GACxBO,EAAWE,OAAON,EAAO,GACzBK,EAAUE,KAAKL,GACfN,EAAiBQ,GACjBN,EAAiBO,GACjBG,QAAQC,IAAId,GACZa,QAAQC,IAAIZ,OACP,CACL,IAAMG,EAAQH,EAAcI,WAAU,SAACpE,GAAD,OAAYA,EAAOY,OAASA,KAC5DyD,EAAeL,EAAcM,MAAK,SAACtE,GAAD,OAAYA,EAAOY,OAASA,KAC9D2D,EAAahF,EAAMuE,GACnBU,EAAYjF,EAAMyE,GACxBQ,EAAUC,OAAON,EAAO,GACxBI,EAAWG,KAAKL,GAChBN,EAAiBQ,GACjBN,EAAiBO,KAMfK,EAAyBf,EAAc5B,KAAI,SAAClC,GAAD,OAC/C,cAAC,EAAD,CAEE0D,YAAaA,EACb1E,WAAYA,EACZgB,OAAQA,GAHHA,EAAOY,SAMVkE,EAAyBd,EAAc9B,KAAI,SAAClC,GAAD,OAC/C,cAAC,EAAD,CAEE0D,YAAaA,EACb1E,WAAYA,EACZgB,OAAQA,GAHHA,EAAOY,SAOhB,OACE,mCACE,sBAAKvB,UAAU,uBAAf,UACE,oBAAIA,UAAU,oBAAd,6BACA,sBAAKA,UAAU,kBAAf,UACE,mBAAGA,UAAU,eAAb,kBACA,mBAAGA,UAAU,eAAb,qBAEF,sBAAKA,UAAU,yBAAf,UACE,qBAAKA,UAAU,wCAAf,SACGwF,IAEH,qBAAKxF,UAAU,wCAAf,SACGyF,OAGL,qBAAKzF,UAAU,gCAAf,SACE,wBACEA,UAAU,mCACVC,QAtCW,kBAAMsE,EAAyBE,IAoC5C,mCAYJiB,EAAW,SAAC,GAAoB,IAAlB3F,EAAiB,EAAjBA,WAAiB,EACCqB,mBAAS,GADV,mBAC5BuE,EAD4B,KAChBC,EADgB,OAEOxE,mBAAS,WAFhB,mBAE5ByE,EAF4B,KAEbC,EAFa,KAGnC,OACE,mCACE,sBAAK9F,UAAU,2BAAf,UACE,sBAAKA,UAAU,6BAAf,UACE,wBACEA,UACoB,YAAlB6F,EACI,wCACA,gCAEN/B,MAAM,UACN7D,QAAS,SAACyD,GAAD,OAAOoC,EAAiBpC,EAAElC,OAAOsC,QAP5C,sCAWA,wBACE9D,UACoB,aAAlB6F,EACI,wCACA,gCAEN/B,MAAM,WACN7D,QAAS,SAACyD,GAAD,OAAOoC,EAAiBpC,EAAElC,OAAOsC,QAP5C,uCAWA,wBACE9D,UACoB,SAAlB6F,EACI,wCACA,gCAEN/B,MAAM,OACN7D,QAAS,SAACyD,GAAD,OAAOoC,EAAiBpC,EAAElC,OAAOsC,QAP5C,mCAYF,sBAAK9D,UAAU,sCAAf,UACE,qBAAKA,UAAU,uBAAf,SACE,uBACE4D,KAAK,SACL5D,UAAU,gDACV8D,MAAO6B,EACP5B,SAAU,SAACL,GAAD,OAAOkC,EAAc3B,OAAOP,EAAElC,OAAOsC,aAGnD,wBACE9D,UAAU,uBACVC,QAAS,kBAAMF,EAAW4F,EAAYE,IAFxC,yBA4DKE,EAhDD,SAAC,GAQR,IAPLlG,EAOI,EAPJA,SACAC,EAMI,EANJA,MACAC,EAKI,EALJA,WACAJ,EAII,EAJJA,WACA4C,EAGI,EAHJA,QACAC,EAEI,EAFJA,WACAwD,EACI,EADJA,QAGMzB,EAA2B,SAAC0B,GAChC,IAAMC,EAAkBhG,EAAMqC,GAC9B2D,EAAgBF,GAASzD,QAAU0D,EACnCC,EAAgBF,GAASG,KAAO,EAChC3D,EAAW0D,GACXrG,EAAS,QAmBX,OACE,mCACE,sBAAKG,UAAU,yBAAf,UACE,qBAAKA,UAAU,eAAf,SApBiB,SAACF,GACtB,OAAQA,GACN,IAAK,WACH,OAAO,cAAC,EAAD,CAAUC,WAAYA,IAC/B,IAAK,QACH,OACE,cAAC,EAAD,CACEwC,QAASA,EAAQyD,GAASzD,QAC1BgC,yBAA0BA,EAC1B5E,WAAYA,IAGlB,QACE,MAAO,IAOwByG,CAAetG,KAC9C,qBAAKE,UAAU,4BAAf,SACE,wBAAQA,UAAU,+BAA+BC,QA9BtC,kBAAMJ,EAAS,QA8B1B,SACa,aAAVC,EAAuB,QAAU,mBCxG/BuG,G,MAlGQ,SAAC,GAMjB,IALL9D,EAKI,EALJA,QAEAC,EAGI,EAHJA,WACAwD,EAEI,EAFJA,QACAM,EACI,EADJA,WAkBMC,EAAiB,SAAC7C,GACtB,IAAI8C,EAAiBC,OAAO,uCAAwC,IACpE,GACsB,OAAnBD,GAAuC,KAAZR,GACR,KAAnBQ,GAAqC,KAAZR,EAE1BQ,EAAiBE,OAAOC,KAAKpE,GAASqE,YACjC,GACe,OAAnBJ,GAAuC,KAAZR,GACR,KAAnBQ,GAAqC,KAAZR,EAE1B,OAAOA,EAET,GAAIzD,EAAQsE,eAAeL,GACzB,OAAOM,MAAM,kDAEf,IAAIC,EAAmB7G,EAAMqC,GAC7B,QAAQ,GACN,IAAwB,eAAnBmB,EAAElC,OAAOsC,MACZiD,EAAiBP,GAAkB,CAAEL,KAAM,EAAG5D,QAAS,IACvDC,EAAWuE,GACX,MACF,IAAwB,kBAAnBrD,EAAElC,OAAOsC,MACZiD,EAAiBP,GAAkBtG,EAAM6G,EAAiBf,IAC1DM,EAAWE,UACJO,EAAiBf,GACxBxD,EAAWuE,GACX,MACF,QACED,MAAM,0BAaZ,OACE,mCACE,sBAAK9G,UAAU,8BAAf,UA3DK0G,OAAOC,KAAKpE,GAASM,KAAI,SAACmE,GAAD,OAC9B,wBAEElD,MAAOkD,EACP/G,QAAS,SAACyD,GAAD,OAAO4C,EAAW5C,EAAElC,OAAOsC,QACpC9D,UACEgG,IAAYgB,EACR,wCACA,gCAPR,SAUGA,GATIA,MA2DL,qBAAKhH,UAAU,UACf,sBAAKA,UAAU,oCAAf,UACE,wBACEA,UAAU,cACV8D,MAAM,gBACN7D,QAAS,SAACyD,GAAD,OAAO6C,EAAe7C,IAHjC,oBAOA,wBACE1D,UAAU,oBACV8D,MAAM,gBACN7D,QA1BY,WACpB,QAAgCgH,IAA5BP,OAAOC,KAAKpE,GAAS,GACvB,OAAOuE,MAAM,mDAEf,IAAMZ,EAAkBhG,EAAMqC,UACvB2D,EAAgBF,GACvBM,EAAWI,OAAOC,KAAKpE,GAAS,IAChCC,EAAW0D,IAgBL,oBAOA,wBACElG,UAAU,cACV8D,MAAM,aACN7D,QAAS,SAACyD,GAAD,OAAO6C,EAAe7C,IAHjC,2BCsEKwD,MAnJf,WAAgB,IAAD,EACiB9F,mBAC5BhB,KAAKC,MAAM8G,aAAaC,QAAQ,aAAe,CAC7C,EAAK,CAAEjB,KAAM,EAAG5D,QAAS,MAHhB,mBACNA,EADM,KACGC,EADH,OAMiBpB,mBAASsF,OAAOC,KAAKpE,GAAS,IAN/C,mBAMNyD,EANM,KAMGM,EANH,OAOiClF,oBAAS,GAP1C,mBAONiG,EAPM,KAOWC,EAPX,OAQ2ClG,oBAAS,GARpD,mBAQNmG,EARM,KAQgBC,EARhB,OASapG,mBAAS,OATtB,mBASNtB,EATM,KASCD,EATD,KAUPF,EAAa4C,EAAQyD,GAASG,KAEpCsB,qBAAU,WACRN,aAAaO,QAAQ,UAAWtH,KAAKE,UAAUiC,MAC9C,CAACA,IAEJ,IAWMxC,EAAa,SAAC4H,EAAQC,GAC1B,IAAM1B,EAAkBhG,EAAMqC,GAC9B,OAAQqF,GACN,IAAK,UACH1B,EAAgBF,GAASG,MAAQwB,EACjC,MACF,IAAK,WACHzB,EAAgBF,GAASG,MAAQwB,EACjC,MACF,IAAK,OACHzB,EAAgBF,GAASG,KAAOwB,EAChC,MACF,QACE,OAAOA,EAEXnF,EAAW0D,IAuBb,OACE,qBAAKlG,UAAU,MAAf,SACE,sBAAKA,UAAU,SAAf,UACE,sBAAKA,UAAU,eAAf,UACE,oBAAIA,UAAU,QAAd,4BACA,qBAAKA,UAAU,gCAAf,SACE,wBACEA,UACEuH,EACI,2CACA,mCAENtH,QAAS,kBAAMuH,GAAyBD,IAN1C,+BAWDA,EACC,qBAAKvH,UAAU,0CAAf,SACE,cAAC,EAAD,CACEuC,QAASA,EACTC,WAAYA,EACZwD,QAASA,EACTM,WAAYA,MAGd,KACJ,qBAAItG,UAAU,2BAAd,cAA2CgG,EAA3C,OACA,qBAAIhG,UAAU,YAAd,kBAAgCL,KAChC,cAAC,EAAD,CACEA,WAAYA,EACZC,MAhFI,WACZ,GAAc,UAAVE,EACFD,EAAS,YACJ,GAAI0C,EAAQyD,GAASzD,QAAQqE,OAAS,EAC3C/G,EAAS,aACJ,CACL,IAAMqG,EAAkBhG,EAAMqC,GAC9B2D,EAAgBF,GAASG,KAAO,EAChC3D,EAAW0D,KAyELrG,SAAUA,EACVC,MAAOA,EACPC,WAAYA,IAEd,uBACA,qBAAKC,UAAU,2BAAf,SACE,wBACEA,UACEqH,EACI,sCACA,8BAENpH,QAAS,kBAAMqH,GAAoBD,IANrC,0BAWDA,EACC,cAAC,EAAD,CACEtE,UAxEM,SAACpC,GACjB,IAAMuF,EAAkBhG,EAAMqC,GAC9B2D,EAAgBF,GAASzD,QAAQ8C,KAAK1E,GACtC6B,EAAW0D,IAsEDvG,WAAYA,EACZ2B,UAAWgG,IAEX,KACO,QAAVxH,EACC,cAAC,EAAD,CACED,SAAUA,EACVC,MAAOA,EACPkG,QAASA,EACTrG,WAAYA,EACZI,WAAYA,EACZwC,QAASA,EACTC,WAAYA,IAEZ,QAEN,qBAAKxC,UAAU,uBAAf,SACE,cAAC,EAAD,CACEL,WAAYA,EACZ4C,QAASA,EAAQyD,GAAR,QACTxD,WAAYA,EACZtB,aAzFW,SAACP,GACpB,IAAMuF,EAAkBhG,EAAMqC,GACxBuC,EAAQoB,EAAgBF,GAASzD,QAAQwC,WAC7C,SAACrB,GAAD,OAAOA,EAAEnC,OAASZ,EAAOY,QAE3B2E,EAAgBF,GAASzD,QAAQ6C,OAAON,EAAO,GAC/CtC,EAAW0D,IAoFH/E,oBAlFkB,SAACR,GAC3B,IAAMuF,EAAkBhG,EAAMqC,GACxBuC,EAAQoB,EAAgBF,GAASzD,QAAQwC,WAC7C,SAACrB,GAAD,OAAOA,EAAEnC,OAASZ,EAAOY,QAE3B2E,EAAgBF,GAASzD,QAAQuC,GAAOjE,SAAWlB,EACnD6C,EAAW0D,cC/DA2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.463c2227.chunk.js","sourcesContent":["import \"./TurnManipulator.css\";\n\nconst TurnManipulator = ({\n  turnNumber,\n  reset,\n  setModal,\n  modal,\n  changeTurn,\n}) => {\n  const previousTurnArrows = \"<<\";\n  const nextTurnArrows = \">>\";\n  const nextTurn = () => changeTurn(1, \"forward\");\n  const previousTurn = () => changeTurn(1, \"backward\");\n  const toggleModal = () => {\n    if (modal === \"jumpTurn\") {\n      setModal(\"off\");\n    } else {\n      setModal(\"jumpTurn\");\n    }\n  };\n  return (\n    <>\n      <div className=\"turnManipulatorButtonsContainer\">\n        <button\n          className=\"basicButton turnManipulatorButton\"\n          onClick={previousTurn}\n        >\n          {previousTurnArrows}\n        </button>\n        <button\n          className={\n            modal === \"jumpTurn\"\n              ? \"basicButton turnManipulatorButton pressed\"\n              : \"basicButton turnManipulatorButton\"\n          }\n          onClick={toggleModal}\n        >\n          Jump\n        </button>\n        <button\n          className=\"basicButton turnManipulatorButton\"\n          onClick={nextTurn}\n        >\n          {nextTurnArrows}\n        </button>\n      </div>\n      <div className=\"resetButtonContainer\">\n        <button\n          className={\n            modal === \"reset\"\n              ? \"resetButton basicButton pressed\"\n              : \"resetButton basicButton\"\n          }\n          onClick={reset}\n        >\n          Reset\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default TurnManipulator;\n","function clone<T>(object: T): T {\n  return JSON.parse(JSON.stringify(object));\n}\n\nfunction getClassName(durationRemaining) {\n  switch (true) {\n    case durationRemaining === Infinity:\n      return \"permanent\";\n    case durationRemaining > 0:\n      return \"active\";\n    case durationRemaining <= 0:\n      return \"expired\";\n    default:\n      return \"\";\n  }\n}\n\nfunction getRoundsToMinutesAndSeconds(rounds) {\n  const minutes = Math.floor(rounds / 10);\n  const seconds = Math.floor((rounds % 10) * 6);\n  return [minutes, seconds];\n}\nfunction getRoundsToHoursAndMinutes(rounds) {\n  const hours = Math.floor(rounds / 600);\n  const minutes = Math.floor((rounds % 600) / 10);\n  return [hours, minutes];\n}\nfunction getRoundsToDaysAndHours(rounds) {\n  const days = Math.floor(rounds / 14400);\n  const hours = Math.floor((rounds % 14400) / 600);\n  return [days, hours];\n}\n\nfunction getRemainingRounds(effect, turnNumber) {\n  let remainingRounds = effect.turnUsed + effect.duration - turnNumber;\n  switch (effect.durationType) {\n    case \"round\":\n      break;\n    case \"minute\":\n      remainingRounds = effect.turnUsed + effect.duration * 10 - turnNumber;\n      break;\n    case \"hour\":\n      remainingRounds = effect.turnUsed + effect.duration * 600 - turnNumber;\n      break;\n    case \"day\":\n      remainingRounds = effect.turnUsed + effect.duration * 14400 - turnNumber;\n      break;\n    case \"permanent\":\n      return Infinity;\n    default:\n      break;\n  }\n  return remainingRounds;\n}\nexport {\n  clone,\n  getClassName,\n  getRoundsToMinutesAndSeconds,\n  getRoundsToHoursAndMinutes,\n  getRoundsToDaysAndHours,\n  getRemainingRounds,\n};\n","import { useState } from \"react\";\n\nimport \"./Effects.css\";\n\nimport {\n  getClassName,\n  getRoundsToMinutesAndSeconds,\n  getRoundsToHoursAndMinutes,\n  getRoundsToDaysAndHours,\n  getRemainingRounds,\n} from \"../../utilities\";\n\nconst EffectItem = ({\n  effect,\n  turnNumber,\n  removeEffect,\n  resetEffectDuration,\n}) => {\n  const [toggle, setToggle] = useState(false);\n  const name = effect.name;\n  const target = effect.target;\n  const details = effect.details;\n  const conditions = effect.conditions;\n  const infinitySymbol = \"\\u221e\";\n\n  const remainingRounds = getRemainingRounds(effect, turnNumber);\n\n  const minutesAndSeconds = getRoundsToMinutesAndSeconds(remainingRounds);\n  const hoursAndMinutes = getRoundsToHoursAndMinutes(remainingRounds);\n  const daysAndHours = getRoundsToDaysAndHours(remainingRounds);\n\n  function formatRoundsRemaing(remainingRounds) {\n    if (remainingRounds === Infinity) {\n      return infinitySymbol;\n    } else if (remainingRounds < 20) {\n      return remainingRounds + \" rounds\";\n    } else if (remainingRounds >= 20 && remainingRounds < 600) {\n      return minutesAndSeconds[0] + \"m \" + minutesAndSeconds[1] + \"s\";\n    } else if (remainingRounds >= 600 && remainingRounds < 14400) {\n      return hoursAndMinutes[0] + \"h \" + hoursAndMinutes[1] + \"m\";\n    } else if (remainingRounds >= 14400) {\n      return daysAndHours[0] + \"d \" + daysAndHours[1] + \"h\";\n    }\n  }\n\n  const remainingTime = formatRoundsRemaing(remainingRounds);\n\n  const additionalClass = getClassName(remainingRounds);\n\n  const resetDuration = () => resetEffectDuration(effect);\n\n  return (\n    <div\n      role=\"button\"\n      className={\n        toggle\n          ? additionalClass + \" effectContainer insetContainer\"\n          : additionalClass + \" effectContainer\"\n      }\n      onClick={() => setToggle(!toggle)}\n    >\n      <p className=\"effectItem\">\n        <span className=\"effectKeys\">Name</span> - {name}\n      </p>\n      <p className=\"effectItem\">\n        <span className=\"effectKeys\">Time Left</span> - {remainingTime}\n      </p>\n      {toggle ? (\n        <>\n          <div className=\"break\"></div>\n          {target !== \"\" ? (\n            <p className=\"effectItem\">\n              <span className=\"effectKeys\">Target</span> - {target}\n            </p>\n          ) : null}\n          {details !== \"\" ? (\n            <p className=\"effectItem\">\n              <span className=\"effectKeys\">Details</span> - {details}\n            </p>\n          ) : null}\n          {conditions !== \"\" ? (\n            <p className=\"effectItem\">\n              <span className=\"effectKeys\">Conditions</span> - {conditions}\n            </p>\n          ) : null}\n          <div className=\"break\"></div>\n          <div className=\"endResetEffectButtonContainer\">\n            <button\n              className=\"basicButton resetEffectButton\"\n              onClick={resetDuration}\n            >\n              Reset Duration\n            </button>\n            <button\n              className=\"basicButton endEffectButton\"\n              onClick={() => removeEffect(effect)}\n            >\n              End Effect\n            </button>\n          </div>\n        </>\n      ) : null}\n    </div>\n  );\n};\n\nconst Effects = ({\n  turnNumber,\n  effects,\n  setEffects,\n  removeEffect,\n  resetEffectDuration,\n}) => {\n  const sortedEffects = effects.sort((a, b) => {\n    const remainingRoundsA = getRemainingRounds(a, turnNumber);\n    const remainingRoundsB = getRemainingRounds(b, turnNumber);\n    return remainingRoundsA > remainingRoundsB ? 1 : -1;\n  });\n\n  const effectItem = sortedEffects.map((effect) => (\n    <EffectItem\n      effect={effect}\n      removeEffect={removeEffect}\n      turnNumber={turnNumber}\n      key={effect.name}\n      resetEffectDuration={resetEffectDuration}\n    />\n  ));\n  return <>{effectItem}</>;\n};\n\nexport default Effects;\n","import { useState } from \"react\";\n\nimport \"./CreateNewEffect.css\";\n\nconst CreateNewEffect = ({ addEffect, turnNumber, setToggle }) => {\n  const [expanded, setExpanded] = useState(false);\n  const [name, setName] = useState(\"\");\n  const [target, setTarget] = useState(\"\");\n  const [details, setDetails] = useState(\"\");\n  const [duration, setDuration] = useState(1);\n  const [durationType, setDurationType] = useState(\"round\");\n  const [conditions, setConditions] = useState(\"\");\n  let effect = {\n    name: name,\n    target: target,\n    details: details,\n    duration: duration,\n    durationType: durationType,\n    conditions: conditions,\n    turnUsed: turnNumber,\n  };\n  const expandOptions = () => {\n    setExpanded(!expanded);\n  };\n  const handleSetDurationType = (durationType) => {\n    setDurationType(durationType);\n    setExpanded(false);\n  };\n  const handlePermanentDuration = () => {\n    if (effect.durationType === \"permanent\") {\n      effect.duration = Infinity;\n    }\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    handlePermanentDuration();\n    addEffect(effect);\n    setName(\"\");\n    setTarget(\"\");\n    setDetails(\"\");\n    setDuration(1);\n    setDurationType(\"round\");\n    setConditions(\"\");\n    setToggle(false);\n  };\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <div className=\"formContainer\">\n          <fieldset className=\"formItem insetContainer\">\n            <legend className=\"formItemTitle\">Name</legend>\n            <div className=\"textInputContainer\">\n              <input\n                type=\"text\"\n                placeholder=\"name of effect\"\n                className=\"textInput\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                required\n              />\n            </div>\n            <p className=\"requiredText\">* required</p>\n          </fieldset>\n          <fieldset className=\"formItem insetContainer\">\n            <legend className=\"formItemTitle\">Duration</legend>\n            <div className=\"durationInputContainer\">\n              <div className=\"numberInputContainer\">\n                <input\n                  className=\"durationNumberInput textInput\"\n                  type=\"number\"\n                  value={duration}\n                  onChange={(e) => setDuration(Number(e.target.value))}\n                  required\n                />\n              </div>\n              {/*Couldn't use buttons here, applied 'button' role*/}\n              {expanded ? null : (\n                <div\n                  role=\"button\"\n                  className={\n                    durationType === \"permanent\"\n                      ? \"durationTypeSelector basicButton permanent\"\n                      : \"durationTypeSelector basicButton\"\n                  }\n                  value={durationType === \"\" ? \"round\" : durationType}\n                  onClick={expandOptions}\n                >\n                  {durationType === \"permanent\"\n                    ? durationType\n                    : durationType + \"(s)\"}\n                </div>\n              )}\n              {expanded ? (\n                <div className=\"durationTypeSelectorOptionsContainer\">\n                  <div\n                    role=\"button\"\n                    className=\"durationTypeSelectorOptions basicButton\"\n                    value=\"round\"\n                    onClick={() => handleSetDurationType(\"round\")}\n                  >\n                    round(s)\n                  </div>\n                  <div\n                    role=\"button\"\n                    className=\"durationTypeSelectorOptions basicButton\"\n                    value=\"minute\"\n                    onClick={() => handleSetDurationType(\"minute\")}\n                  >\n                    minute(s)\n                  </div>\n                  <div\n                    role=\"button\"\n                    className=\"durationTypeSelectorOptions basicButton\"\n                    value=\"hour\"\n                    onClick={() => handleSetDurationType(\"hour\")}\n                  >\n                    hour(s)\n                  </div>\n                  <div\n                    role=\"button\"\n                    className=\"durationTypeSelectorOptions basicButton\"\n                    value=\"day\"\n                    onClick={() => handleSetDurationType(\"day\")}\n                  >\n                    day(s)\n                  </div>\n                  <div\n                    role=\"button\"\n                    className=\"durationTypeSelectorOptions permanent basicButton\"\n                    value=\"permanent\"\n                    onClick={() => handleSetDurationType(\"permanent\")}\n                  >\n                    permanent\n                  </div>\n                </div>\n              ) : null}\n            </div>{\" \"}\n            <p className=\"requiredText\">* required</p>\n          </fieldset>\n          <fieldset className=\"formItem insetContainer\">\n            <legend className=\"formItemTitle\">Target or Area</legend>\n            <div className=\"textAreaInputContainer\">\n              <textarea\n                rows=\"3\"\n                cols=\"30\"\n                className=\"textAreaInput\"\n                placeholder=\"who or what is affected\"\n                value={target}\n                onChange={(e) => setTarget(e.target.value)}\n              />\n            </div>\n          </fieldset>\n          <fieldset className=\"formItem insetContainer\">\n            <legend className=\"formItemTitle\">Details</legend>\n            <div className=\"textAreaInputContainer\">\n              <textarea\n                rows=\"3\"\n                cols=\"30\"\n                className=\"textAreaInput\"\n                placeholder='breif description what effect does. ex.: \"+4 armor bonus\"'\n                value={details}\n                onChange={(e) => setDetails(e.target.value)}\n              />\n            </div>\n          </fieldset>\n          <fieldset className=\"formItem insetContainer\">\n            <legend className=\"formItemTitle\">Conditions</legend>{\" \"}\n            <div className=\"textAreaInputContainer\">\n              <textarea\n                rows=\"3\"\n                cols=\"30\"\n                className=\"textAreaInput\"\n                placeholder=\"ex.: must be within 60' of Sabri\"\n                value={conditions}\n                onChange={(e) => setConditions(e.target.value)}\n              />\n            </div>\n          </fieldset>\n          <div className=\"break\"></div>\n          <div className=\"addEffectButtonContainer\">\n            <input className=\"basicButton addEffectButton\" type=\"submit\" />\n          </div>\n        </div>\n      </form>\n    </>\n  );\n};\n\nexport default CreateNewEffect;\n","import { useState } from \"react\";\n\nimport { clone, getRemainingRounds, getClassName } from \"../../utilities\";\n\nimport \"./Modal.css\";\n\nconst EffectButtons = ({ effect, handleClick, turnNumber }) => {\n  const remainingRounds = getRemainingRounds(effect, turnNumber);\n  const additionalClass = getClassName(remainingRounds);\n\n  return (\n    <div className=\"effectButtonContainer\">\n      <button\n        key={effect.name}\n        value={effect.name}\n        className={additionalClass + \" effectButton basicButton\"}\n        onClick={(e) => handleClick(e)}\n      >\n        {effect.name}\n      </button>\n    </div>\n  );\n};\n\nconst Reset = ({ effects, setEffectsAndResetRounds, turnNumber }) => {\n  const [effectsToKeep, setEffectsToKeep] = useState(\n    effects.filter((e) => e.durationType === \"permanent\")\n  );\n  const [effectsToLose, setEffectsToLose] = useState(\n    effects.filter((e) => e.durationType !== \"permanent\")\n  );\n  const handleClick = (e) => {\n    const name = e.target.value;\n    if (effectsToKeep.some((effect) => effect.name === name)) {\n      const index = effectsToKeep.findIndex((effect) => effect.name === name);\n      const effectToSwap = effectsToKeep.find((effect) => effect.name === name);\n      const newKeepers = clone(effectsToKeep);\n      const newLosers = clone(effectsToLose);\n      newKeepers.splice(index, 1);\n      newLosers.push(effectToSwap);\n      setEffectsToKeep(newKeepers);\n      setEffectsToLose(newLosers);\n      console.log(effectsToKeep);\n      console.log(effectsToLose);\n    } else {\n      const index = effectsToLose.findIndex((effect) => effect.name === name);\n      const effectToSwap = effectsToLose.find((effect) => effect.name === name);\n      const newKeepers = clone(effectsToKeep);\n      const newLosers = clone(effectsToLose);\n      newLosers.splice(index, 1);\n      newKeepers.push(effectToSwap);\n      setEffectsToKeep(newKeepers);\n      setEffectsToLose(newLosers);\n    }\n  };\n\n  const confirmReset = () => setEffectsAndResetRounds(effectsToKeep);\n\n  const effectsToKeepComponent = effectsToKeep.map((effect) => (\n    <EffectButtons\n      key={effect.name}\n      handleClick={handleClick}\n      turnNumber={turnNumber}\n      effect={effect}\n    />\n  ));\n  const effectsToLoseComponent = effectsToLose.map((effect) => (\n    <EffectButtons\n      key={effect.name}\n      handleClick={handleClick}\n      turnNumber={turnNumber}\n      effect={effect}\n    />\n  ));\n\n  return (\n    <>\n      <div className=\"keepEffectsContainer\">\n        <h4 className=\"keepEffectsHeader\">Current Effects</h4>\n        <div className=\"keepLoseHeaders\">\n          <p className=\"smallHeaders\">Keep</p>\n          <p className=\"smallHeaders\">Lose</p>\n        </div>\n        <div className=\"listOfEffectsContainer\">\n          <div className=\"effectsToKeepContainer insetContainer\">\n            {effectsToKeepComponent}\n          </div>\n          <div className=\"effectsToLoseContainer insetContainer\">\n            {effectsToLoseComponent}\n          </div>\n        </div>\n        <div className=\"confirmKeepersButtonContainer\">\n          <button\n            className=\"basicButton confirmKeepersButton\"\n            onClick={confirmReset}\n          >\n            Confirm Reset\n          </button>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst JumpTurn = ({ changeTurn }) => {\n  const [jumpNumber, setJumpNumber] = useState(1);\n  const [jumpSelection, setJumpSelection] = useState(\"forward\");\n  return (\n    <>\n      <div className=\"jumpTurnContentContainer\">\n        <div className=\"jumpOptionsButtonContainer\">\n          <button\n            className={\n              jumpSelection === \"forward\"\n                ? \"jumpOptionsButton basicButton pressed\"\n                : \"jumpOptionsButton basicButton\"\n            }\n            value=\"forward\"\n            onClick={(e) => setJumpSelection(e.target.value)}\n          >\n            Number of rounds forward\n          </button>\n          <button\n            className={\n              jumpSelection === \"backward\"\n                ? \"jumpOptionsButton basicButton pressed\"\n                : \"jumpOptionsButton basicButton\"\n            }\n            value=\"backward\"\n            onClick={(e) => setJumpSelection(e.target.value)}\n          >\n            Number of rounds backward\n          </button>\n          <button\n            className={\n              jumpSelection === \"goTo\"\n                ? \"jumpOptionsButton basicButton pressed\"\n                : \"jumpOptionsButton basicButton\"\n            }\n            value=\"goTo\"\n            onClick={(e) => setJumpSelection(e.target.value)}\n          >\n            To specified round\n          </button>\n        </div>\n        <div className=\"jumpNumberInputAndGoButtonContainer\">\n          <div className=\"numberInputContainer\">\n            <input\n              type=\"number\"\n              className=\"durationNumberInput textInput jumpNumberInput\"\n              value={jumpNumber}\n              onChange={(e) => setJumpNumber(Number(e.target.value))}\n            />\n          </div>\n          <button\n            className=\"goButton basicButton\"\n            onClick={() => changeTurn(jumpNumber, jumpSelection)}\n          >\n            Go\n          </button>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst Modal = ({\n  setModal,\n  modal,\n  changeTurn,\n  turnNumber,\n  effects,\n  setEffects,\n  tracker,\n}) => {\n  const closeModal = () => setModal(\"off\");\n  const setEffectsAndResetRounds = (newArray) => {\n    const newEffectsArray = clone(effects);\n    newEffectsArray[tracker].effects = newArray;\n    newEffectsArray[tracker].turn = 1;\n    setEffects(newEffectsArray);\n    setModal(\"off\");\n  };\n  const displayContent = (modal) => {\n    switch (modal) {\n      case \"jumpTurn\":\n        return <JumpTurn changeTurn={changeTurn} />;\n      case \"reset\":\n        return (\n          <Reset\n            effects={effects[tracker].effects}\n            setEffectsAndResetRounds={setEffectsAndResetRounds}\n            turnNumber={turnNumber}\n          />\n        );\n      default:\n        return \"\";\n    }\n  };\n\n  return (\n    <>\n      <div className=\"modalBody topContainer\">\n        <div className=\"modalContent\">{displayContent(modal)}</div>\n        <div className=\"closeModalButtonContainer\">\n          <button className=\"basicButton closeModalButton\" onClick={closeModal}>\n            {modal === \"jumpTurn\" ? \"Close\" : \"Cancel\"}\n          </button>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Modal;\n","import { useState } from \"react\";\nimport { clone } from \"../../utilities\";\nimport \"./ManageTrackers.css\";\n\nconst ManageTrackers = ({\n  effects,\n\n  setEffects,\n  tracker,\n  setTracker,\n}) => {\n  const renderEffectListButton = () => {\n    return Object.keys(effects).map((listName) => (\n      <button\n        key={listName}\n        value={listName}\n        onClick={(e) => setTracker(e.target.value)}\n        className={\n          tracker === listName\n            ? \"basicButton trackerNameButton pressed\"\n            : \"basicButton trackerNameButton\"\n        }\n      >\n        {listName}\n      </button>\n    ));\n  };\n  const addEditTracker = (e) => {\n    let newTrackerName = prompt(\"Please enter a name for this tracker\", \"\");\n    if (\n      (newTrackerName === null && tracker === \"\") ||\n      (newTrackerName === \"\" && tracker === \"\")\n    ) {\n      newTrackerName = Object.keys(effects).length;\n    } else if (\n      (newTrackerName === null && tracker !== \"\") ||\n      (newTrackerName === \"\" && tracker !== \"\")\n    ) {\n      return tracker;\n    }\n    if (effects.hasOwnProperty(newTrackerName)) {\n      return alert(\"Duplicate tracker name found, please try again\");\n    }\n    let newEffectsObject = clone(effects);\n    switch (true) {\n      case e.target.value === \"newTracker\":\n        newEffectsObject[newTrackerName] = { turn: 1, effects: [] };\n        setEffects(newEffectsObject);\n        break;\n      case e.target.value === \"renameTracker\":\n        newEffectsObject[newTrackerName] = clone(newEffectsObject[tracker]);\n        setTracker(newTrackerName);\n        delete newEffectsObject[tracker];\n        setEffects(newEffectsObject);\n        break;\n      default:\n        alert(\"Something went wrong\");\n    }\n  };\n  const deleteTracker = () => {\n    if (Object.keys(effects)[1] === undefined) {\n      return alert(\"Cannot have zero trackers. Use [Reset] instead.\");\n    }\n    const newEffectsArray = clone(effects);\n    delete newEffectsArray[tracker];\n    setTracker(Object.keys(effects)[0]);\n    setEffects(newEffectsArray);\n  };\n\n  return (\n    <>\n      <div className=\"trackerNameButtonsContainer\">\n        {renderEffectListButton()}\n        <div className=\"break\"></div>\n        <div className=\"editAndNewTrackerButtonsContainer\">\n          <button\n            className=\"basicButton\"\n            value=\"renameTracker\"\n            onClick={(e) => addEditTracker(e)}\n          >\n            Rename\n          </button>\n          <button\n            className=\"basicButton reset\"\n            value=\"deleteTracker\"\n            onClick={deleteTracker}\n          >\n            Delete\n          </button>\n          <button\n            className=\"basicButton\"\n            value=\"newTracker\"\n            onClick={(e) => addEditTracker(e)}\n          >\n            New\n          </button>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ManageTrackers;\n","import { useState, useEffect } from \"react\";\n\nimport \"./App.css\";\n\nimport TurnManipulator from \"../TurnManipulator/TurnManipulator\";\nimport Effects from \"../Effects/Effects\";\nimport CreateNewEffect from \"../CreateNewEffect/CreateNewEffect\";\nimport Modal from \"../Modal/Modal\";\nimport ManageTrackers from \"../ManageTrackers/ManageTrackers\";\n\nimport { clone } from \"../../utilities.js\";\n\nfunction App() {\n  const [effects, setEffects] = useState(\n    JSON.parse(localStorage.getItem(\"effects\")) || {\n      \"1\": { turn: 1, effects: [] },\n    }\n  );\n  const [tracker, setTracker] = useState(Object.keys(effects)[0]);\n  const [toggleNewEffect, setToggleNewEffect] = useState(false);\n  const [toggleManageTrackers, setToggleManageTrackers] = useState(false);\n  const [modal, setModal] = useState(\"off\");\n  const turnNumber = effects[tracker].turn;\n\n  useEffect(() => {\n    localStorage.setItem(\"effects\", JSON.stringify(effects));\n  }, [effects]);\n\n  const reset = () => {\n    if (modal === \"reset\") {\n      setModal(\"off\");\n    } else if (effects[tracker].effects.length > 0) {\n      setModal(\"reset\");\n    } else {\n      const newEffectsArray = clone(effects);\n      newEffectsArray[tracker].turn = 1;\n      setEffects(newEffectsArray);\n    }\n  };\n  const changeTurn = (number, direction) => {\n    const newEffectsArray = clone(effects);\n    switch (direction) {\n      case \"forward\":\n        newEffectsArray[tracker].turn += number;\n        break;\n      case \"backward\":\n        newEffectsArray[tracker].turn -= number;\n        break;\n      case \"goTo\":\n        newEffectsArray[tracker].turn = number;\n        break;\n      default:\n        return number;\n    }\n    setEffects(newEffectsArray);\n  };\n  const addEffect = (effect) => {\n    const newEffectsArray = clone(effects);\n    newEffectsArray[tracker].effects.push(effect);\n    setEffects(newEffectsArray);\n  };\n  const removeEffect = (effect) => {\n    const newEffectsArray = clone(effects);\n    const index = newEffectsArray[tracker].effects.findIndex(\n      (e) => e.name === effect.name\n    );\n    newEffectsArray[tracker].effects.splice(index, 1);\n    setEffects(newEffectsArray);\n  };\n  const resetEffectDuration = (effect) => {\n    const newEffectsArray = clone(effects);\n    const index = newEffectsArray[tracker].effects.findIndex(\n      (e) => e.name === effect.name\n    );\n    newEffectsArray[tracker].effects[index].turnUsed = turnNumber;\n    setEffects(newEffectsArray);\n  };\n  return (\n    <div className=\"app\">\n      <div className=\"shadow\">\n        <div className=\"topContainer\">\n          <h1 className=\"title\">Effect Tracker</h1>\n          <div className=\"manageTrackersButtonContainer\">\n            <button\n              className={\n                toggleManageTrackers\n                  ? \"basicButton manageTrackersButton pressed\"\n                  : \"basicButton manageTrackersButton\"\n              }\n              onClick={() => setToggleManageTrackers(!toggleManageTrackers)}\n            >\n              Manage Trackers\n            </button>\n          </div>\n          {toggleManageTrackers ? (\n            <div className=\"manangeTrackersContainer insetContainer\">\n              <ManageTrackers\n                effects={effects}\n                setEffects={setEffects}\n                tracker={tracker}\n                setTracker={setTracker}\n              />\n            </div>\n          ) : null}\n          <h2 className=\"currentEffectsListHeader\">\"{tracker}\"</h2>\n          <h2 className=\"turnCount\">Turn {turnNumber}</h2>\n          <TurnManipulator\n            turnNumber={turnNumber}\n            reset={reset}\n            setModal={setModal}\n            modal={modal}\n            changeTurn={changeTurn}\n          />\n          <br />\n          <div className=\"newEffectButtonContainer\">\n            <button\n              className={\n                toggleNewEffect\n                  ? \"newEffectButton basicButton pressed\"\n                  : \"newEffectButton basicButton\"\n              }\n              onClick={() => setToggleNewEffect(!toggleNewEffect)}\n            >\n              New Effect\n            </button>\n          </div>\n          {toggleNewEffect ? (\n            <CreateNewEffect\n              addEffect={addEffect}\n              turnNumber={turnNumber}\n              setToggle={setToggleNewEffect}\n            />\n          ) : null}\n          {modal !== \"off\" ? (\n            <Modal\n              setModal={setModal}\n              modal={modal}\n              tracker={tracker}\n              turnNumber={turnNumber}\n              changeTurn={changeTurn}\n              effects={effects}\n              setEffects={setEffects}\n            />\n          ) : null}\n        </div>\n        <div className=\"effectsListContainer\">\n          <Effects\n            turnNumber={turnNumber}\n            effects={effects[tracker][\"effects\"]}\n            setEffects={setEffects}\n            removeEffect={removeEffect}\n            resetEffectDuration={resetEffectDuration}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Components/App/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}